renv::restore()
Sys.setenv(RENV_DOWNLOAD_FILE_METHOD = "libcurl")
renv::restore()
Sys.setenv(RENV_DOWNLOAD_FILE_METHOD = "wininet")
renv::restore()
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
shiny::runApp()
R.version.string
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages("backports")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("bit")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("blob")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("bit64")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("caTools")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("cli")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages("crosstalk")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("DBI")
install.packages("ellipsis")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("ggplot2")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages("dplyr")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("yaml")
install.packages(c("tinytex", "withr", "xfun"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("data.table", "dbplyr", "digest"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("rmarkdown", "tibble", "tidyr"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::restore()
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi"))
install.packages(c("DT", "fansi"))
install.packages(c("farver", "hms"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("htmltools", "htmlwidgets", "httpuv"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("MASS", "Matrix", "mgcv", "mime", "nlme", "odbc"))
install.packages(c("MASS", "Matrix", "mgcv", "mime"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("labeling", "later", "lattice", "nlme"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages(c("pillar", "prettyunits", "promises"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
shiny::runApp()
renv::snapshot()
shiny::runApp()
runApp()
shiny::runApp()
# Package Import ----
library(dplyr)
source('~/TM/TM-app_GIT_COPY/ks5-transition-matrices/TM_tidy_data.R', echo=TRUE)
View(raw_stud_numbers)
View(raw_stud_numbers_lookup)
rm(list=ls())
source('~/TM/TM-app_GIT_COPY/ks5-transition-matrices/TM_tidy_data.R', echo=TRUE)
View(tidy_data_numbers)
rm(list=ls())
source('~/TM/2020_TMs/TM_ancillary_file.R', echo=TRUE)
source('~/TM/TM-app_GIT_COPY/ks5-transition-matrices/TM_ancillary_file.R', echo=TRUE)
source('~/TM/TM-app_GIT_COPY/ks5-transition-matrices/TM_ancillary_file.R', echo=TRUE)
View(num_perc_combined2)
write_csv(num_perc_combined2, file = "tm_numbers_percentages_2020U.csv")
shiny::runApp()
shiny::runApp()
lifecycle::last_warnings()
shiny::runApp()
shiny::runApp()
#source("./global.R")
source("server.R")
source("ui.R")
shinyApp(ui = ui, server = server)
#source("./global.R")
source("server.R")
source("ui.R")
shinyApp(ui = ui, server = server)
renv::snapshot
renv::snapshot()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::install_github("ewenme/shinya11y")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("ewenme/shinya11y")
library(devtools)
devtools::install_github("ewenme/shinya11y")
source("https://raw.githubusercontent.com/dfe-analytical-services/dfeR/master/R/proxy.R")
setup_proxy()
devtools::install_github("ewenme/shinya11y")
devtools::install_github("dfe-analytical-services/dfeR")
devtools::install("C:\Users\ktehrani\OneDrive - Department for Education\Downloads\shinya11y-master\shinya11y-master")
devtools::install("C:/Users/ktehrani/OneDrive - Department for Education/Downloads/shinya11y-master/shinya11y-master")
shiny::runApp()
renv::snapshot()
devtools::install("C:/Users/ktehrani/OneDrive - Department for Education/Downloads/shinya11y-master/shinya11y-master")
shiny::runApp()
runApp()
devtools::install("C:/Users/ktehrani/OneDrive - Department for Education/Downloads/shinyGovstyle-master/shinyGovstyle-master")
renv::restore()
devtools::install("C:/Users/ktehrani/OneDrive - Department for Education/Downloads/shinyGovstyle-master/shinyGovstyle-master")
install.packages("rlang")
devtools::install("C:/Users/ktehrani/OneDrive - Department for Education/Downloads/shinyGovstyle-master/shinyGovstyle-master")
shiny::runApp()
renv:snapshot()
renv::snapshot()
runApp()
library(shinyGovstyle)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
renv::restore()
shiny::runApp()
install.packages(c("colorspace", "cpp11", "crayon", "crosstalk", "desc"))
install.packages(c("colorspace", "cpp11", "crayon", "crosstalk", "desc"))
shiny::runApp()
renv::snapshot()
runApp()
install.packages(c("brio", "cli", "colorspace", "diffobj"))
install.packages(c("brio", "cli", "colorspace", "diffobj"))
shiny::runApp()
renv::snapshot()
install.packages(c("isoband", "lifecycle", "lubridate", "MASS", "Matrix"))
shiny::runApp()
renv::snapshot()
install.packages(c("farver", "fastmap", "ggplot2", "govdown"))
shiny::runApp()
renv::snapshot()
renv::snapshot()
install.packages("BH")
install.packages(c("htmltools", "htmlwidgets", "httpuv"))
shiny::runApp()
renv::snapshot()
install.packages(c("isoband", "lifecycle", "lubridate", "MASS"))
shiny::runApp()
renv::snapshot()
install.packages(c("lubridate", "Matrix", "mgcv", "mime", "nlme"))
shiny::runApp()
renv::snapshot()
install.packages(c("pkgbuild", "pkgload", "processx", "promises", "ps", "Rcpp"))
shiny::runApp()
renv::snapshot()
install.packages(c("renv", "rprojroot", "rvest", "vctrs", "waldo"))
shiny::runApp()
renv::snapshot()
install.packages(c("tinytex", "utf8", "webdriver", "withr", "xfun"))
shiny::runApp()
runApp()
renv::snapshot()
install.packages(c("shinytest", "testthat", "tidyr"))
shiny::runApp()
renv::snapshot()
install.packages(c("backports", "dplyr"))
shiny::runApp()
renv::snapshot()
install.packages(c("BH", "lubridate", "renv", "utf8"))
shiny::runApp()
renv::snapshot()
install.packages("shiny")
shiny::runApp()
renv::snapshot()
install.packages(c("fansi", "pillar"))
shiny::runApp()
renv::snapshot()
install.packages(c("BH", "renv"))
shiny::runApp()
renv::snapshot()
install.packages("BH")
shiny::runApp()
install.packages("odbc")
runApp()
renv::snapshot()
app <- ShinyDriver$new("../../")
library(shinytest)
shinytest::testApp("../")
shinytest::testApp("../")
testApp("../")
shinytest::testApp("./")
shinytest::installDependencies()
runApp()
testApp("./")
runApp()
runApp()
shiny::runApp()
# Package Import ----
library(odbc)
library(DBI)
library(dplyr)
library(stringr)
library(tidyr)
library(data.table)
library(formattable)
library(caTools)
library(dbplyr)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Things to change between runs ----
# -----------------------------------------------------------------------------------------------------------------------------
# Exam and Lookup file sources
###### ----- 2019 Amended Data ----- #####
exam_file = '[L3VA].[A2019].[FILTERED_EXAMS_PROVIDERS_SJK]'
lookup_file = '[L3VA].[A2019].[QUAL_SUBJ_LOOKUP_SJK]'
# Qualifications with character and numeric gradings, e.g D1, D2...
# Can use QA script to see if there are any new qualifications to add to this list
sublevno_char_num = c(113, 114)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Reading in the data from SQL tables ----
# -----------------------------------------------------------------------------------------------------------------------------
# Establish connection to server
con <- DBI::dbConnect(odbc::odbc(), driver = 'SQL Server',
server = '3dcpri-pdb16\\acsqls')
# Select data from SQL tables
exams_data <- tbl(con, sql(paste("select *
from", exam_file, "where GRADE <> 'Q'"))) %>% collect()
lookup <- tbl(con, sql(paste('select [Qualification name], SUBLEVNO, [Subject name], SUBJ, ASIZE
from', lookup_file,
'where EXAM_COHORT not in (1)'))) %>% collect()
# Disconnect
DBI::dbDisconnect(con)
# Create new column which removes decimal point from ASIZE
lookup <- lookup %>%
mutate(size_lookup = gsub('[.]', '', ASIZE)) %>%
arrange(SUBLEVNO)
tm_bands <- exams_data %>%
filter(EXAM_COHORT != 1) %>%
select(SUBLEVNO, SUBJ, GRADE, ASIZE, PRIOR, QUAL_ID) %>%
mutate(PRIOR_BAND = case_when(PRIOR <1 ~ '<1',
PRIOR >=1 & PRIOR <2 ~ '1-<2',
PRIOR >=2 & PRIOR <3 ~ '2-<3',
PRIOR >=3 & PRIOR <4 ~ '3-<4',
PRIOR >=4 & PRIOR <5 ~ '4-<5',
PRIOR >=5 & PRIOR <6 ~ '5-<6',
PRIOR >=6 & PRIOR <7 ~ '6-<7',
PRIOR >=7 & PRIOR <8 ~ '7-<8',
PRIOR >=8 & PRIOR <9 ~ '8-<9',
PRIOR >=9 ~ '9>='),
QUAL_ID = stringr::str_remove(QUAL_ID, '.'))
cross_tab <- tm_bands %>%
# Collapse synonyms of grades into one. The majority of these come from the IB
mutate(GRADE = case_when(GRADE == '*A' | GRADE == 'A*' ~ '*A',
GRADE == '*D' | GRADE == 'D*' ~ 'D*',
GRADE == '**D' | GRADE == 'D**' ~ 'D**',
GRADE == '*DD' | GRADE == 'DD*' ~ 'DD*',
GRADE == 'DDM' | GRADE == 'MDD' ~ 'DDM',
GRADE == 'F' ~ 'U',
grepl('F', GRADE) ~ 'FAIL',
TRUE ~ as.character(GRADE))) %>%
# SUBLEVNO 113 and 114 have P1, D1, M1 grading structure so can't strip letters from these
mutate(GRADE = ifelse(is.na(as.numeric(str_extract_all(GRADE, '\\d+'))) | SUBLEVNO %in% sublevno_char_num,
GRADE, as.numeric(str_extract_all(GRADE, '\\d+')))) %>%
count(GRADE, QUAL_ID, PRIOR_BAND) %>%
mutate(ROW_ID = paste0(QUAL_ID, PRIOR_BAND), SUBLEVNO = substr(QUAL_ID, 1, 3), SUBJ = substr(QUAL_ID, 4, 8),
ASIZE = substr(QUAL_ID, 9, length(QUAL_ID))) %>%
arrange(ROW_ID)
student_numbers <- cross_tab %>% pivot_wider(names_from = GRADE, values_from = n)
student_percentages <- stud_numbers %>%
janitor::adorn_percentages() %>%
mutate_if(is.numeric, function(x){round(x*100, 2)}) %>%
mutate_if(is.numeric, ~paste0(.x, '%'))
setdiff(student_percentages, stud_percentages)
setdiff(stud_percentages, student_percentages)
rm(list=ls())
runApp()
rm(list=ls())
runApp()
runApp()
shiny::runTests("myapp")
library(shiny)
shiny::runTests("ks5-transition-matrices")
shiny::runTests()
shiny::runTests(.)
shiny::runTests("ks5-transition-matrices")
shiny::runTests("C:/Users/ktehrani/OneDrive - Department for Education/Documents/TM/TM-app_GIT_COPY/ks5-transition-matrices")
shiny::runTests("ks5-transition-matrices")
shiny::runTests("C:/Users/ktehrani/OneDrive - Department for Education/Documents/TM/TM-app_GIT_COPY/ks5-transition-matrices")
setwd(C:/Users/ktehrani/OneDrive - Department for Education/Documents/TM/TM-app_GIT_COPY/ks5-transition-matrices")
setwd("C:/Users/ktehrani/OneDrive - Department for Education/Documents/TM/TM-app_GIT_COPY/ks5-transition-matrices")
shiny::runTests("ks5-transition-matrices")
getwd()
shiny::runTests()
shiny::runTests()
viewTestDiff()
shiny::runTests()
recordTest()
shiny::runTests()
app <- ShinyDriver$new("../../")
app$snapshotInit("initial_load_test", screenshot = FALSE)
# 1. Does it load  -------------------------------------------------------------------------------------------------------------------
app$snapshot()
# app <- ShinyDriver$new("../../")
# app$snapshotInit("initial_load_test", screenshot = FALSE)
#
# app$snapshot()
library(shiny)
app <- ShinyDriver$new("../../")
app <- ShinyDriver$new("../")
app <- ShinyDriver$new("..")
app$snapshotInit("initial_load_test")
app <- ShinyDriver$new("..")
app$snapshotInit("initial_load_test")
app <- ShinyDriver$new("../../")
app$snapshotInit("initial_load_test", screenshot = FALSE)
app <- ShinyDriver$new("../../")
# Initialize a ShinyDriver object using the app in the test script's parent
# directory
app <- ShinyDriver$new("..")
app <- ShinyDriver$new("../../")
app <- ShinyDriver$new("../..")
app <- ShinyDriver$new(".")
# Initialize a ShinyDriver object using the app in the test script's parent
# directory
app <- ShinyDriver$new(".")
app$snapshotInit("initial_load_test")
system("java -version")
shinytest::dependenciesInstalled()
Sys.unsetenv("http_proxy")
Sys.unsetenv("https_proxy")
# Initialize a ShinyDriver object using the app in the test script's parent
# directory
app <- ShinyDriver$new(".")
shiny::runTests()
shiny::runTests()
runApp()
shiny::runTests()
runApp()
shiny::runTests()
runApp()
shiny::runTests()
shiny::runTests()
shiny::runTests()
runApp()
install.packages("shinya11y")
devtools::install_github("ewenme/shinya11y")
devtools::install_github("ewenme/shinya11y")
shiny::runApp()
renv::snapshot()
devtools::install_github("moj-analytical-services/shinyGovstyle")
runApp()
rm(list=ls())
shiny::runApp()
renv::snapshot()
renv::snapshot()
shiny::runTests()
shiny::runTests()
shiny::runTests()
Sys.unsetenv("http_proxy")
Sys.unsetenv("https_proxy")
shiny::runTests()
shiny::runTests()
shiny::runApp()
runApp()
renv::restore()
install.packages("renv")
library(renv)
renv::restore()
renv::restore()
renv::restore(packages = tibble)
renv::restore(packages = "tibble".)
renv::restore(packages = "tibble")
shiny::runApp()
runApp()
renv::snapshot()
runApp()
runApp()
runApp()
raw_stud_percentages <- stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
#  mutate(COUNT = as.numeric(gsub("%", "", COUNT))) %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)
runApp()
install.packages("rsconnect")
runApp()
renv::snapshot()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
rm(list=ls())
runApp()
options(shiny.autoload.r = FALSE)
runApp()
runApp()
source('.R/04_app_text.R')
source('.R/04_app_text.R')
source('./R/04_app_text.R')
runApp()
source('./R/04_app_text.R')
runApp()
source('./R/04_app_text.R')
runApp()
runApp()
# Returns a table from the Student Numbers CSV
number_select_qrd_1 = function(qual, subj, size){
filter_selection = paste0(qual, subj, size)
qual_grades = filter(grades_qrd, SUBLEVNO == qual)
# Grades already sorted so just need to extract list of grades
grade_list = qual_grades$GRADE
table = stud_numbers %>%
filter(QUAL_ID == filter_selection) %>%
select(PRIOR_BAND, grade_list)
return(table)
}
runApp()
runApp()
runApp()
user_selection_example <- lookup %>%
filter(`Qualification name` == 'GCE A level' & `Subject name` == 'Mathematics' & SIZE == 1) %>%
distinct()
example_data <- number_select_qrd_1(user_selection_example$SUBLEVNO, user_selection_example$SUBJ, user_selection_example$size_lookup) %>%
rename('Prior Band' = PRIOR_BAND) %>%
.[!sapply(., function (x) all(is.na(x) | x == ""))]
# extract the value for example
example_value <- example_data %>%
filter(`Prior Band` == '5-<6') %>%
pull('C')
runApp()
rm(list=ls())
source('./R/04_app_text.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server.R)
runApp()
runApp()
runApp()
runApp()
runApp()
View(lookup)
shiny::runApp()
findLineNum()
traceback()
runApp()
traceback()
options(error=recover)
runApp()
6
runApp()
0
0
0
o
0
q
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
lookup_characters <- lookup %>%
mutate(across(c(SUBLEVNO, SUBJ, SIZE), ~.as.character(x)))
lookup_characters <- lookup %>%
mutate(across(c(SUBLEVNO, SUBJ, SIZE), ~as.character(x)))
lookup_characters <- lookup %>%
mutate(across(c(SUBLEVNO, SUBJ, SIZE), ~as.character(.x)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
