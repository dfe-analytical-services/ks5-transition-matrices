# Joins the two QRD tables with qualifications with same grades, orders by Qual_Number, filters out grades N Q R X and F
same_grade_quals <- qrd_table2 %>%
distinct() %>%
left_join(qrd_table0, by = "Qual_Type") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
filter(!Grade %in% c('N', 'Q', 'R', 'X')) %>%
filter(Grade != 'F') %>%
filter(Qual_Number %in% SUBLEVNO_in_exams$SUBLEVNO) %>%
mutate(subscript_1 = Qual_Number) %>%
mutate(SUBLEVNO_subscript_1 = as.character(Qual_Number)) %>%
mutate(subscript_2 = Qual_Number) %>%
mutate(SUBLEVNO_subscript_2 = as.character(Qual_Number))
# Joins the two QRD tables with qualifications with different grades. makes additional column to append subscripts in order to differentiate subjects within qualification
# requires additional filter QUID %in% GNUMBER_diff_grades$GNUMBER because some of the qualifications have subjects that are not included in the TMs
diff_grade_quals <- qrd_table3 %>%
left_join(qrd_table0, by = "QUID") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
filter(!Grade %in% c('N', 'Q', 'R', 'X')) %>%
filter(Grade != 'F') %>%
filter(Qual_Number %in% SUBLEVNO_in_exams$SUBLEVNO) %>%
filter(QUID %in% GNUMBER_diff_grades$GNUMBER) %>%
group_by(QUID) %>%
mutate(subscript_1 = group_indices()) %>%
ungroup() %>%
unite("SUBLEVNO_subscript_1", c(Qual_Number,subscript_1), na.rm = TRUE, remove = FALSE) %>%
arrange(subscript_1)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create a huge lookup tables FOR ALL QUALS ----
# -----------------------------------------------------------------------------------------------------------------------------
all_same_grade_quals_subj <- same_grade_quals %>%
left_join(., GNUM_in_exams, by = "QUID") %>%
left_join(., SUBJ_in_lookup, by = "SUBJ") %>%
arrange(Qual_Number, subscript_1) %>%
distinct()
all_diff_grade_quals_subj <- diff_grade_quals %>%
left_join(., GNUM_in_exams, by = "QUID") %>%
left_join(., SUBJ_in_lookup, by = "SUBJ") %>%
arrange(Qual_Number, subscript_1) %>%
group_by(SUBJ) %>%
mutate(subscript_2 = group_indices()) %>%
ungroup() %>%
unite("SUBLEVNO_subscript_2", c(Qual_Number,subscript_2), na.rm = TRUE, remove = FALSE) %>%
arrange(subscript_2) %>%
distinct()
# makes big lookup table for ALL qualifications and subjects
all_grades_combined <- bind_rows(all_same_grade_quals_subj, all_diff_grade_quals_subj)
# Qualification 699 does not appear in QRD as its just an extension of GCE AS level (Not continued to A2) (121)
grades_699 <- all_grades_combined %>%
filter(Qual_Number == 111 | Qual_Number == 121) %>%
mutate(Qual_Number = 699) %>%
mutate(subscript_1 = 699) %>%
mutate(SUBLEVNO_subscript_1 = 699) %>%
mutate(subscript_2 = 699) %>%
mutate(SUBLEVNO_subscript_2 = 699) %>%
mutate(Last_Used = 0) %>%
mutate(Qual_Description = 'GCE AS level (All)') %>%
mutate(Syllabus_Short_Title = '') %>%
mutate(QUID = '') %>%
mutate(ASIZE = 0.5) %>%
distinct()
all_grades_combined <- rbind(all_grades_combined, grades_699)
# -------------
# QA to check all subjects in 111 and 121 are present in 699 data
# -------------
subj_699 <- grades_699 %>% select('Subject name', SUBJ) %>% distinct()
subj_111 <- lookup_data %>% filter(SUBLEVNO == 111) %>% select('Subject name', SUBJ)
subj_121 <- lookup_data %>% filter(SUBLEVNO == 121) %>% select('Subject name', SUBJ)
setdiff(subj_699, subj_121)
setdiff(subj_699, subj_111)
subj_111_121 <- merge(subj_111, subj_121, all = TRUE)
setdiff(subj_699, subj_111_121)
# -------------
# create smaller table showing which SUBLEVNO_subscript_2 is associated with which subject (no grade data)
subscript_subj_lookup <- all_grades_combined %>%
select(QUID, Qual_Number, Qual_Description, SUBLEVNO_subscript_2, SUBJ, `Subject name`) %>%
distinct() %>%
filter(!is.na(SUBJ))
# There are some rows with QUID information but no subject information
# looking through the data these might be because the QUIDs are associated with qual/subj that were 'last taken' a few years ago?
no_subj_info <- all_grades_combined %>%
select(QUID, Qual_Number, Qual_Description, SUBLEVNO_subscript_2, SUBJ, `Subject name`) %>%
distinct() %>%
filter(is.na(SUBJ))
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create QUALIFICATION LOOKUP ----
# -----------------------------------------------------------------------------------------------------------------------------
# need to make qualification lookups sep because quals with diff grades need subject names appending
# 699 also needs adding on manually
qual_names_EXCEL_ALL <- all_grades_combined %>%
mutate(Qual_Name = case_when(!(Qual_Number %in% GNUMBER_diff_quals) | Qual_Number == 699 ~ Qual_Description,
TRUE ~ paste(Qual_Description, `Subject name`,  sep = " ")
)
)
QUALIFICATION_LOOKUP_EXCEL <- qual_names_EXCEL_ALL %>%
select(SUBLEVNO_subscript_2, Qual_Name) %>%
distinct()
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create SUBJECT LOOKUP ----
# -----------------------------------------------------------------------------------------------------------------------------
SUBJECT_LOOKUP_EXCEL <- all_grades_combined %>%
select(SUBJ, 'Subject name') %>%
distinct() %>%
drop_na() %>%
arrange(SUBJ)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create QUALSUB ----
# -----------------------------------------------------------------------------------------------------------------------------
qual_names_EXCEL_grouped <- qual_names_EXCEL_ALL %>%
select(Qual_Name, SUBLEVNO_subscript_2, SUBJ) %>%
distinct() %>%
drop_na() %>%
arrange(SUBLEVNO_subscript_2, SUBJ) %>%
group_by(SUBLEVNO_subscript_2) %>%
mutate(subj_count = row_number()) %>%
ungroup()
QUALSUB_EXCEL <- qual_names_EXCEL_grouped %>%
reshape2::dcast(., Qual_Name + SUBLEVNO_subscript_2 ~ subj_count, value.var='SUBJ', fill='') %>%
distinct() %>%
arrange(SUBLEVNO_subscript_2)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create SIZESUB ----
# -----------------------------------------------------------------------------------------------------------------------------
size_EXCEL_grouped <- qual_names_EXCEL_ALL %>%
select(Qual_Name, SUBLEVNO_subscript_2, ASIZE) %>%
distinct() %>%
drop_na() %>%
arrange(ASIZE) %>%
group_by(SUBLEVNO_subscript_2) %>%
mutate(size_count = row_number()) %>%
ungroup()
SIZESUB_EXCEL <- size_EXCEL_grouped %>%
reshape2::dcast(., Qual_Name + SUBLEVNO_subscript_2 ~ size_count, value.var='ASIZE', fill='') %>%
distinct() %>%
arrange(SUBLEVNO_subscript_2)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create SIZE LOOKUP ----
# -----------------------------------------------------------------------------------------------------------------------------
SIZE_LOOKUP_EXCEL <- qual_names_EXCEL_ALL %>%
select(SUBLEVNO_subscript_2, Qual_Name, SUBJ, `Subject name`, ASIZE) %>%
mutate(ASIZE = as.character(ASIZE)) %>%
distinct() %>%
drop_na()
View(all_grades_combined)
alev_grades <- qrd_table2 %>%
distinct() %>%
left_join(qrd_table0, by = "Qual_Type") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
# filter(!Grade %in% c('N', 'Q', 'R', 'X')) %>%
# filter(Grade != 'F') %>%
filter(Grade_Text == "Grade A*")
View(alev_grades)
alev_grades <- qrd_table2 %>%
distinct() %>%
left_join(qrd_table0, by = "Qual_Type") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
# filter(!Grade %in% c('N', 'Q', 'R', 'X')) %>%
# filter(Grade != 'F') %>%
filter(Grade_Text == "Grade A*") %>%
select(Grade, Grade_Text, Qual_Number, Qual_Description) %>%
distinct()
View(alev_grades)
astar_grades_qrd3 <- qrd_table3 %>%
left_join(qrd_table0, by = "QUID") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
filter(Grade_Text == "Grade A*") %>%
select(Grade, Grade_Text, Qual_Number, Qual_Description) %>%
distinct()
astar_grades_qrd2 <- qrd_table2 %>%
distinct() %>%
left_join(qrd_table0, by = "Qual_Type") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
filter(Grade_Text == "Grade A*") %>%
select(Grade, Grade_Text, Qual_Number, Qual_Description) %>%
distinct()
View(astar_grades_qrd3)
View(astar_grades_qrd2)
shiny::runApp()
install.packages("shinydashboard")
runApp()
install.packages("ggplot2")
runApp()
install.packages("tidyr")
runApp()
shiny::runApp()
install.packages("tidyr")
runApp()
install.packages(c("bit", "bit64", "cli", "dbplyr", "digest", "dplyr", "ellipsis", "glue", "odbc", "pillar", "Rcpp", "rlang", "stringi", "tibble", "vctrs"))
shiny::runApp()
shiny::runApp()
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv(restore)
install.packages("renv")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv(restore)
renv::restore()
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::restore()
install.packages("bit64")
renv::restore()
install.packages("BH")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::restore()
renv::restore()
renv::purge("bit64")
renv::restore()
warnings()
renv::restore()
Sys.setenv(RENV_DOWNLOAD_FILE_METHOD = "libcurl")
renv::restore()
Sys.setenv(RENV_DOWNLOAD_FILE_METHOD = "wininet")
renv::restore()
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
shiny::runApp()
R.version.string
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages("backports")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("bit")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("blob")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("bit64")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("caTools")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("cli")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages("crosstalk")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("DBI")
install.packages("ellipsis")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("ggplot2")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages("dplyr")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("yaml")
install.packages(c("tinytex", "withr", "xfun"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("data.table", "dbplyr", "digest"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("rmarkdown", "tibble", "tidyr"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::restore()
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi"))
install.packages(c("DT", "fansi"))
install.packages(c("farver", "hms"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("htmltools", "htmlwidgets", "httpuv"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("MASS", "Matrix", "mgcv", "mime", "nlme", "odbc"))
install.packages(c("MASS", "Matrix", "mgcv", "mime"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("labeling", "later", "lattice", "nlme"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages(c("pillar", "prettyunits", "promises"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
shiny::runApp()
renv::snapshot()
shiny::runApp()
runApp()
shiny::runApp()
# Package Import ----
library(dplyr)
source('~/TM/TM-app_GIT_COPY/ks5-transition-matrices/TM_tidy_data.R', echo=TRUE)
View(raw_stud_numbers)
View(raw_stud_numbers_lookup)
rm(list=ls())
source('~/TM/TM-app_GIT_COPY/ks5-transition-matrices/TM_tidy_data.R', echo=TRUE)
View(tidy_data_numbers)
rm(list=ls())
source('~/TM/2020_TMs/TM_ancillary_file.R', echo=TRUE)
source('~/TM/TM-app_GIT_COPY/ks5-transition-matrices/TM_ancillary_file.R', echo=TRUE)
source('~/TM/TM-app_GIT_COPY/ks5-transition-matrices/TM_ancillary_file.R', echo=TRUE)
View(num_perc_combined2)
write_csv(num_perc_combined2, file = "tm_numbers_percentages_2020U.csv")
shiny::runApp()
shiny::runApp()
lifecycle::last_warnings()
shiny::runApp()
shiny::runApp()
#source("./global.R")
source("server.R")
source("ui.R")
shinyApp(ui = ui, server = server)
#source("./global.R")
source("server.R")
source("ui.R")
shinyApp(ui = ui, server = server)
renv::snapshot
renv::snapshot()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::install_github("ewenme/shinya11y")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("ewenme/shinya11y")
library(devtools)
devtools::install_github("ewenme/shinya11y")
source("https://raw.githubusercontent.com/dfe-analytical-services/dfeR/master/R/proxy.R")
setup_proxy()
devtools::install_github("ewenme/shinya11y")
devtools::install_github("dfe-analytical-services/dfeR")
devtools::install("C:\Users\ktehrani\OneDrive - Department for Education\Downloads\shinya11y-master\shinya11y-master")
devtools::install("C:/Users/ktehrani/OneDrive - Department for Education/Downloads/shinya11y-master/shinya11y-master")
shiny::runApp()
renv::snapshot()
devtools::install("C:/Users/ktehrani/OneDrive - Department for Education/Downloads/shinya11y-master/shinya11y-master")
shiny::runApp()
runApp()
devtools::install("C:/Users/ktehrani/OneDrive - Department for Education/Downloads/shinyGovstyle-master/shinyGovstyle-master")
renv::restore()
devtools::install("C:/Users/ktehrani/OneDrive - Department for Education/Downloads/shinyGovstyle-master/shinyGovstyle-master")
install.packages("rlang")
devtools::install("C:/Users/ktehrani/OneDrive - Department for Education/Downloads/shinyGovstyle-master/shinyGovstyle-master")
shiny::runApp()
renv:snapshot()
renv::snapshot()
runApp()
library(shinyGovstyle)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
renv::restore()
shiny::runApp()
install.packages(c("colorspace", "cpp11", "crayon", "crosstalk", "desc"))
install.packages(c("colorspace", "cpp11", "crayon", "crosstalk", "desc"))
shiny::runApp()
renv::snapshot()
runApp()
install.packages(c("brio", "cli", "colorspace", "diffobj"))
install.packages(c("brio", "cli", "colorspace", "diffobj"))
shiny::runApp()
renv::snapshot()
install.packages(c("isoband", "lifecycle", "lubridate", "MASS", "Matrix"))
shiny::runApp()
renv::snapshot()
install.packages(c("farver", "fastmap", "ggplot2", "govdown"))
shiny::runApp()
renv::snapshot()
renv::snapshot()
install.packages("BH")
install.packages(c("htmltools", "htmlwidgets", "httpuv"))
shiny::runApp()
renv::snapshot()
install.packages(c("isoband", "lifecycle", "lubridate", "MASS"))
shiny::runApp()
renv::snapshot()
install.packages(c("lubridate", "Matrix", "mgcv", "mime", "nlme"))
shiny::runApp()
renv::snapshot()
install.packages(c("pkgbuild", "pkgload", "processx", "promises", "ps", "Rcpp"))
shiny::runApp()
renv::snapshot()
install.packages(c("renv", "rprojroot", "rvest", "vctrs", "waldo"))
shiny::runApp()
renv::snapshot()
install.packages(c("tinytex", "utf8", "webdriver", "withr", "xfun"))
shiny::runApp()
runApp()
renv::snapshot()
install.packages(c("shinytest", "testthat", "tidyr"))
shiny::runApp()
renv::snapshot()
install.packages(c("backports", "dplyr"))
shiny::runApp()
renv::snapshot()
install.packages(c("BH", "lubridate", "renv", "utf8"))
shiny::runApp()
renv::snapshot()
install.packages("shiny")
shiny::runApp()
renv::snapshot()
install.packages(c("fansi", "pillar"))
shiny::runApp()
renv::snapshot()
install.packages(c("BH", "renv"))
shiny::runApp()
renv::snapshot()
install.packages("BH")
shiny::runApp()
install.packages("odbc")
runApp()
renv::snapshot()
app <- ShinyDriver$new("../../")
library(shinytest)
shinytest::testApp("../")
shinytest::testApp("../")
testApp("../")
shinytest::testApp("./")
shinytest::installDependencies()
runApp()
testApp("./")
runApp()
runApp()
shiny::runApp()
# Package Import ----
library(odbc)
library(DBI)
library(dplyr)
library(stringr)
library(tidyr)
library(data.table)
library(formattable)
library(caTools)
library(dbplyr)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Things to change between runs ----
# -----------------------------------------------------------------------------------------------------------------------------
# Exam and Lookup file sources
###### ----- 2019 Amended Data ----- #####
exam_file = '[L3VA].[A2019].[FILTERED_EXAMS_PROVIDERS_SJK]'
lookup_file = '[L3VA].[A2019].[QUAL_SUBJ_LOOKUP_SJK]'
# Qualifications with character and numeric gradings, e.g D1, D2...
# Can use QA script to see if there are any new qualifications to add to this list
sublevno_char_num = c(113, 114)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Reading in the data from SQL tables ----
# -----------------------------------------------------------------------------------------------------------------------------
# Establish connection to server
con <- DBI::dbConnect(odbc::odbc(), driver = 'SQL Server',
server = '3dcpri-pdb16\\acsqls')
# Select data from SQL tables
exams_data <- tbl(con, sql(paste("select *
from", exam_file, "where GRADE <> 'Q'"))) %>% collect()
lookup <- tbl(con, sql(paste('select [Qualification name], SUBLEVNO, [Subject name], SUBJ, ASIZE
from', lookup_file,
'where EXAM_COHORT not in (1)'))) %>% collect()
# Disconnect
DBI::dbDisconnect(con)
# Create new column which removes decimal point from ASIZE
lookup <- lookup %>%
mutate(size_lookup = gsub('[.]', '', ASIZE)) %>%
arrange(SUBLEVNO)
tm_bands <- exams_data %>%
filter(EXAM_COHORT != 1) %>%
select(SUBLEVNO, SUBJ, GRADE, ASIZE, PRIOR, QUAL_ID) %>%
mutate(PRIOR_BAND = case_when(PRIOR <1 ~ '<1',
PRIOR >=1 & PRIOR <2 ~ '1-<2',
PRIOR >=2 & PRIOR <3 ~ '2-<3',
PRIOR >=3 & PRIOR <4 ~ '3-<4',
PRIOR >=4 & PRIOR <5 ~ '4-<5',
PRIOR >=5 & PRIOR <6 ~ '5-<6',
PRIOR >=6 & PRIOR <7 ~ '6-<7',
PRIOR >=7 & PRIOR <8 ~ '7-<8',
PRIOR >=8 & PRIOR <9 ~ '8-<9',
PRIOR >=9 ~ '9>='),
QUAL_ID = stringr::str_remove(QUAL_ID, '.'))
cross_tab <- tm_bands %>%
# Collapse synonyms of grades into one. The majority of these come from the IB
mutate(GRADE = case_when(GRADE == '*A' | GRADE == 'A*' ~ '*A',
GRADE == '*D' | GRADE == 'D*' ~ 'D*',
GRADE == '**D' | GRADE == 'D**' ~ 'D**',
GRADE == '*DD' | GRADE == 'DD*' ~ 'DD*',
GRADE == 'DDM' | GRADE == 'MDD' ~ 'DDM',
GRADE == 'F' ~ 'U',
grepl('F', GRADE) ~ 'FAIL',
TRUE ~ as.character(GRADE))) %>%
# SUBLEVNO 113 and 114 have P1, D1, M1 grading structure so can't strip letters from these
mutate(GRADE = ifelse(is.na(as.numeric(str_extract_all(GRADE, '\\d+'))) | SUBLEVNO %in% sublevno_char_num,
GRADE, as.numeric(str_extract_all(GRADE, '\\d+')))) %>%
count(GRADE, QUAL_ID, PRIOR_BAND) %>%
mutate(ROW_ID = paste0(QUAL_ID, PRIOR_BAND), SUBLEVNO = substr(QUAL_ID, 1, 3), SUBJ = substr(QUAL_ID, 4, 8),
ASIZE = substr(QUAL_ID, 9, length(QUAL_ID))) %>%
arrange(ROW_ID)
student_numbers <- cross_tab %>% pivot_wider(names_from = GRADE, values_from = n)
student_percentages <- stud_numbers %>%
janitor::adorn_percentages() %>%
mutate_if(is.numeric, function(x){round(x*100, 2)}) %>%
mutate_if(is.numeric, ~paste0(.x, '%'))
setdiff(student_percentages, stud_percentages)
setdiff(stud_percentages, student_percentages)
rm(list=ls())
runApp()
rm(list=ls())
runApp()
runApp()
