# ---- SORTING NAs ----
# -----------------------------------------------------------------------------------------------------------------------------
colSums(is.na(tm_data_raw)) %>% as.data.frame()
# NAs in prior band which need removing
# NAs in subj because no subj code was assigned within the SQL production code
# SUBJ is assigned by joining on the QUAL_SUBJ_LOOKUP,
# but some subjects are filtered out of the L3VA process if they are not entered in 5 or more institutions
# for the TMs we don't mind this rule, so we've decided to leave them in but we will have to create new SUBJ codes
# to ensure I'm not overwriting any existing SUBJ codes, I'm generating 3 digit random numbers (SUBJ is usually 5 digits)
tm_data_subj_na <- tm_data_raw %>%
filter(!(is.na(PRIOR_BAND)),
is.na(SUBJ)) %>%
group_by(Subject) %>%
mutate(SUBJ = sample(100:900,1))
tm_data <- tm_data_raw %>%
filter(!(is.na(PRIOR_BAND)),
!(is.na(SUBJ))) %>%
bind_rows(tm_data_subj_na)
colSums(is.na(tm_data)) %>% as.data.frame()
# -----------------------------------------------------------------------------------------------------------------------------
# ---- NUMBERS & PERCENTAGES CALCULATED ----
# -----------------------------------------------------------------------------------------------------------------------------
student_numbers <- tm_data %>%
mutate(GRADE = case_when(GRADE == "Fail" & SUBLEVNO != 130 ~ "U",
TRUE ~ GRADE),
SIZE = case_when(ASIZE == 0 ~ GSIZE,
TRUE ~ ASIZE),
QUAL_ID = paste0(SUBLEVNO, SUBJ, SIZE, gradeStructure),
ROW_ID = paste0(SUBLEVNO, SUBJ, SIZE, PRIOR_BAND, gradeStructure)) %>%
mutate(across(c(everything(), -total_students), ~as.character(.))) %>%
arrange(ROW_ID) %>%
pivot_wider(names_from = GRADE, values_from = total_students)
student_percentages <- student_numbers %>%
janitor::adorn_percentages() %>%
mutate_if(is.numeric, function(x){round(x*100, 2)}) %>%
mutate_if(is.numeric, ~paste0(.x, "%"))
# -----------------------------------------------------------------------------------------------------------------------------
# ---- LOOKUP & FULL GRADE OPTIONS CALCULATED ----
# -----------------------------------------------------------------------------------------------------------------------------
qual_lookup <- tm_data %>%
select(Qual_Description, SUBLEVNO, Subject, SUBJ, ASIZE, GSIZE, gradeStructure) %>%
distinct() %>%
mutate(SIZE = case_when(ASIZE == 0 ~ GSIZE,
TRUE ~ ASIZE))
grade_lookup_u <- tm_data %>%
select(SUBLEVNO, SUBJ, ASIZE, GSIZE, gradeStructure) %>%
distinct() %>%
mutate(GRADE = case_when(SUBLEVNO == 130 ~ "Fail",
TRUE ~ "U"))
grade_lookup_sep <- tm_data %>%
select(SUBLEVNO, SUBJ, ASIZE, GSIZE, gradeStructure) %>%
distinct() %>%
mutate(GRADE = gradeStructure) %>%
separate_rows(. , GRADE, sep = ",")
grade_lookup <- bind_rows(grade_lookup_u, grade_lookup_sep) %>%
arrange(SUBLEVNO, SUBJ, ASIZE, GSIZE, gradeStructure, GRADE) %>%
mutate(SIZE = case_when(ASIZE == 0 ~ GSIZE,
TRUE ~ ASIZE))
# would like to sort numeric and character grades differently so that all grades go from low - high
# for numeric this is ascending, for character this is descending
# will need to split again based on numeric and character and then re-combine again
grades_char <- grade_lookup %>%
mutate(char_grade_check = is.na(suppressWarnings(as.numeric(grade_lookup$GRADE)))) %>%  # gives extra column - True is character, False is number
filter(char_grade_check == TRUE) %>%
arrange(desc(GRADE))
grades_num <- grade_lookup %>%
mutate(char_grade_check = is.na(suppressWarnings(as.numeric(grade_lookup$GRADE)))) %>%  # gives extra column - True is character, False is number
filter(char_grade_check == FALSE) %>%
arrange(GRADE)
grades_ordered_lookup <- bind_rows(grades_char, grades_num) %>%
arrange(SUBLEVNO)
# grade_list %>% filter(SUBLEVNO == 253, SUBJ == 20596, ASIZE == 1)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Saving Data ----
# -----------------------------------------------------------------------------------------------------------------------------
saveRDS(student_numbers, "./data/all_student_numbers.rds")
saveRDS(student_percentages, "./data/all_student_percentages.rds")
saveRDS(qual_lookup, "./data/qual_lookup.rds")
saveRDS(grades_ordered_lookup, "./data/grade_lookup.rds")
# -----------------------------------------------------------------------------------------------------------------------------
# ---- ANCILLARY DATA FOR EES ----
# -----------------------------------------------------------------------------------------------------------------------------
ancillary_data_numbers <- student_numbers %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "count") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
count) %>%
filter(!is.na(count)) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade)
ancillary_data_percentages <- student_percentages %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "percentage") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
percentage) %>%
filter(percentage != "NA%") %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade)
ancillary_data <- ancillary_data_numbers %>%
left_join(ancillary_data_percentages)
write_csv(ancillary_data, paste0(ancillary_save_path, 'tm_numbers_percentages_', current_year, '.csv'))
shiny::runApp()
library(shinytest)
shinytest::testApp("../")
# Initialize a ShinyDriver object using the app (point to the right directory)
app <- ShinyDriver$new("../../", loadTimeout = 1e+05, )
library(shinytest)
shinytest::testApp("../")
library(shinytest)
shinytest::testApp("./")
install.packages("shinytest")
library(shinytest)
shinytest::testApp("./")
shinytest::installDependencies()
library(shinytest)
shinytest::testApp("./")
shinytest::testApp("./")
library(shinytest)
shinytest::testApp("./")
library(shinytest)
shinytest::testApp("./")
library(shinytest)
shinytest::testApp("./")
rlang::last_error()
library(shinytest)
shinytest::testApp("./")
library(shinytest)
shinytest::testApp("./")
runApp()
runApp()
stud_numbers <- readRDS("data/all_student_numbers.rds")
stud_percentages <- readRDS("data/all_student_percentages.rds")
qual_lookup <- readRDS("data/qual_lookup.rds")
grade_lookup <- readRDS("data/grade_lookup.rds")
shiny::runApp()
View(user_selection_example)
View(grade_lookup)
View(grade_lookup)
View(qual_lookup)
View(stud_numbers)
rm(list=ls())
stud_numbers <- readRDS("data/all_student_numbers.rds")
stud_percentages <- readRDS("data/all_student_percentages.rds")
qual_lookup <- readRDS("data/qual_lookup.rds")
grade_lookup <- readRDS("data/grade_lookup.rds")
View(grade_lookup)
View(qual_lookup)
View(stud_numbers)
View(stud_percentages)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Load packages ----
# -----------------------------------------------------------------------------------------------------------------------------
library(odbc)
library(DBI)
library(dplyr)
library(dbplyr)
library(tidyr)
library(janitor)
library(readr)
rm(list=ls())
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Source functions ----
# -----------------------------------------------------------------------------------------------------------------------------
source("./background_scripts/data_processing_func.R")
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Things to change between runs ----
# -----------------------------------------------------------------------------------------------------------------------------
ancillary_save_path <- "//lonnetapp01/DSGA2/!!Secure Data/SFR/2023/KS5/February_2024/06_ancillary/"
current_year <- "2023A"
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Thing to add - Reading in the data from SQL tables and running function ----
# -----------------------------------------------------------------------------------------------------------------------------
# establish connection to server
con <- DBI::dbConnect(odbc::odbc(), driver = "SQL Server", server = "VMT1PR-DHSQL02")
# Select data from SQL tables - need to add the current year for unamended run and change from U to A for the amended run
tm_data_raw_2023 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].[TM_2023].[TM_data_2023A]")) %>% collect()
tm_data_raw_2022 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].[TM_2022].[TM_data_2022A]")) %>% collect()
# disconnect
DBI::dbDisconnect(con)
processed_data_2023 <- TM_data_prod_func(tm_data_raw_2023, 2023)
processed_data_2022 <- TM_data_prod_func(tm_data_raw_2022, 2022)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Load packages ----
# -----------------------------------------------------------------------------------------------------------------------------
library(odbc)
library(DBI)
library(dplyr)
library(dbplyr)
library(tidyr)
library(janitor)
library(readr)
rm(list=ls())
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Source functions ----
# -----------------------------------------------------------------------------------------------------------------------------
source("./background_scripts/data_processing_func.R")
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Things to change between runs ----
# -----------------------------------------------------------------------------------------------------------------------------
ancillary_save_path <- "//lonnetapp01/DSGA2/!!Secure Data/SFR/2023/KS5/4 Dev/07_development/06_ancillary/"
current_year <- "2023A"
# establish connection to server
con <- DBI::dbConnect(odbc::odbc(), driver = "SQL Server", server = "VMT1PR-DHSQL02")
# Select data from SQL tables - need to add the current year for unamended run and change from U to A for the amended run
tm_data_raw_2023 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].test.[TM_data_2023A_subj_test]")) %>% collect()
tm_data_raw_2022 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].test.[TM_data_2022A_subj_test]")) %>% collect()
# disconnect
DBI::dbDisconnect(con)
processed_data_2023 <- TM_data_prod_func(tm_data_raw_2023, 2023)
processed_data_2023 <- TM_data_prod_func(tm_data_raw_2023, 2023)
sql_data <- tm_data_raw_2023
ReportYear <-  2023
colSums(is.na(sql_data)) %>% as.data.frame()
sql_data %>%
filter(!(is.na(PRIOR_BAND)),
is.na(SUBJ))
tm_data_subj_na <- sql_data %>%
filter(!(is.na(PRIOR_BAND)),
is.na(SUBJ)) %>%
group_by(Subject) %>%
mutate(SUBJ = sample(100:900,1))
tm_data <- sql_data %>%
filter(!(is.na(PRIOR_BAND)),
!(is.na(SUBJ))) %>%
bind_rows(tm_data_subj_na)
tm_data <- sql_data %>%
filter(!(is.na(PRIOR_BAND)),
!(is.na(SUBJ))) #%>%
colSums(is.na(tm_data)) %>% as.data.frame()
rm(list = ls())
source("./background_scripts/data_processing_func.R")
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Things to change between runs ----
# -----------------------------------------------------------------------------------------------------------------------------
ancillary_save_path <- "//lonnetapp01/DSGA2/!!Secure Data/SFR/2023/KS5/4 Dev/07_development/06_ancillary/"
current_year <- "2023A"
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Thing to add - Reading in the data from SQL tables and running function ----
# -----------------------------------------------------------------------------------------------------------------------------
# establish connection to server
con <- DBI::dbConnect(odbc::odbc(), driver = "SQL Server", server = "VMT1PR-DHSQL02")
# Select data from SQL tables - need to add the current year for unamended run and change from U to A for the amended run
tm_data_raw_2023 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].test.[TM_data_2023A_subj_test]")) %>% collect()
tm_data_raw_2022 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].test.[TM_data_2022A_subj_test]")) %>% collect()
# disconnect
DBI::dbDisconnect(con)
# add current year to the function call to produce the processed data - only needs updating for unamended runs as
# the SQL update above deals with version
processed_data_2023 <- TM_data_prod_func(tm_data_raw_2023, 2023)
processed_data_2022 <- TM_data_prod_func(tm_data_raw_2022, 2022)
current_year_data <- processed_data_2023
ancillary_data_numbers <- current_year_data$student_numbers %>%
select(-ReportYr) %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "count") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
count) %>%
filter(!is.na(count)) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade, .locale = "en")
ancillary_data_percentages <- current_year_data$student_percentages %>%
select(-ReportYr) %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "percentage") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
percentage) %>%
filter(percentage != "NA%") %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade, .locale = "en")
ancillary_data <- ancillary_data_numbers %>%
left_join(ancillary_data_percentages)
write_csv(ancillary_data, paste0(ancillary_save_path, 'tm_numbers_percentages_', current_year, '.csv'))
student_numbers <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x){
bind_rows(mget(x, .GlobalEnv)[[1]]["student_numbers"])}) %>% bind_rows()
student_percentages <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x){
bind_rows(mget(x, .GlobalEnv)[[1]]["student_percentages"])}) %>% bind_rows()
qual_lookup <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x){
bind_rows(mget(x, .GlobalEnv)[[1]]["qual_lookup"])}) %>% bind_rows()
grades_ordered_lookup <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x){
bind_rows(mget(x, .GlobalEnv)[[1]]["grades_ordered_lookup"])}) %>% bind_rows()
saveRDS(student_numbers, "./data/all_student_numbers.rds")
saveRDS(student_percentages, "./data/all_student_percentages.rds")
saveRDS(qual_lookup, "./data/qual_lookup.rds")
saveRDS(grades_ordered_lookup, "./data/grade_lookup.rds")
shiny::runApp()
runApp()
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Load packages ----
# -----------------------------------------------------------------------------------------------------------------------------
library(odbc)
library(DBI)
library(dplyr)
library(dbplyr)
library(tidyr)
library(janitor)
library(readr)
rm(list=ls())
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Source functions ----
# -----------------------------------------------------------------------------------------------------------------------------
source("./background_scripts/data_processing_func.R")
ancillary_save_path <- "//lonnetapp01/DSGA2/!!Secure Data/SFR/2023/KS5/4 Dev/07_development/06_ancillary/"
current_year <- "2023A"
# establish connection to server
con <- DBI::dbConnect(odbc::odbc(), driver = "SQL Server", server = "VMT1PR-DHSQL02")
tm_data_raw_2023 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].[TM_2024].[TM_data_2023A]")) %>% collect()
tm_data_raw_2022 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].[TM_2024].[TM_data_2022A]")) %>% collect()
tm_data_raw_2023 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].[TM_2024].[TM_data_2023A]")) %>% collect()
tm_data_raw_2022 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].[TM_2024].[TM_data_2022A]")) %>% collect()
# disconnect
DBI::dbDisconnect(con)
processed_data_2023 <- TM_data_prod_func(tm_data_raw_2023, 2023)
processed_data_2022 <- TM_data_prod_func(tm_data_raw_2022, 2022)
current_year_data <- processed_data_2023
ancillary_data_numbers <- current_year_data$student_numbers %>%
select(-ReportYr) %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "count") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
count) %>%
filter(!is.na(count)) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade, .locale = "en")
ancillary_data_percentages <- current_year_data$student_percentages %>%
select(-ReportYr) %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "percentage") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
percentage) %>%
filter(percentage != "NA%") %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade, .locale = "en")
ancillary_data <- ancillary_data_numbers %>%
left_join(ancillary_data_percentages)
write_csv(ancillary_data, paste0(ancillary_save_path, 'tm_numbers_percentages_', current_year, '.csv'))
student_numbers <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x){
bind_rows(mget(x, .GlobalEnv)[[1]]["student_numbers"])}) %>% bind_rows()
student_percentages <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x){
bind_rows(mget(x, .GlobalEnv)[[1]]["student_percentages"])}) %>% bind_rows()
qual_lookup <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x){
bind_rows(mget(x, .GlobalEnv)[[1]]["qual_lookup"])}) %>% bind_rows()
grades_ordered_lookup <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x){
bind_rows(mget(x, .GlobalEnv)[[1]]["grades_ordered_lookup"])}) %>% bind_rows()
saveRDS(student_numbers, "./data/all_student_numbers.rds")
saveRDS(student_percentages, "./data/all_student_percentages.rds")
saveRDS(qual_lookup, "./data/qual_lookup.rds")
saveRDS(grades_ordered_lookup, "./data/grade_lookup.rds")
shiny::runApp()
getwd()
shinytest2::migrate_from_shinytest("C:/Users/cbennett1/OneDrive - Department for Education/Documents/TM_shiny_app_github/ks5-transition-matrices")
shiny::runApp()
library(shinytest2)
shinytest2::record_test()
library(shinytest2)
record_test()
shinytest2::record_test()
renv::status()
renv::snapshot()
renv::status()
shiny::runApp()
testthat::snapshot_review('shinytest2/')
shinytest2::test_app()
shinytest2::record_test()
shinytest2::record_test()
testthat::snapshot_review('shinytest2/')
shinytest2::test_app()
runApp()
shinytest2::test_app()
runApp()
runApp()
runApp()
shiny::runApp()
shinytest2::test_app()
shinytest2::test_app()
shinytest2::use_shinytest2(".", setup = TRUE)
shinytest2::test_app()
shinytest2::record_test()
shinytest2::test_app()
shinytest2::test_app()
shinytest2::record_test()
shinytest2::record_test()
renv::status()
renv::snapshot()
renv::status()
shinytest2::record_test()
renv::status()
renv::snapshot()
shinytest2::test_app()
renv::restore()
renv::status()
library(odbc)
library(DBI)
library(dplyr)
library(dbplyr)
library(tidyr)
library(janitor)
library(readr)
rm(list = ls())
source("./background_scripts/data_processing_func.R")
ancillary_save_path <- "//lonnetapp01/DSGA2/!!Secure Data/SFR/2024/KS5/01_november_2024/06_ancillary/"
current_year <- "2024U"
# establish connection to server
con <- DBI::dbConnect(odbc::odbc(), driver = "SQL Server", server = "VMT1PR-DHSQL02")
# Select data from SQL tables - need to add the current year for unamended run and change from U to A for the amended run
tm_data_raw_2024 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].[TM_2024].[TM_data_2024U]")) %>% collect()
tm_data_raw_2023 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].[TM_2024].[TM_data_2023A]")) %>% collect()
tm_data_raw_2022 <- tbl(con, sql("select * from [KS5_STATISTICS_RESTRICTED].[TM_2024].[TM_data_2022A]")) %>% collect()
# disconnect
DBI::dbDisconnect(con)
processed_data_2024 <- TM_data_prod_func(tm_data_raw_2024, 2024)
processed_data_2023 <- TM_data_prod_func(tm_data_raw_2023, 2023)
processed_data_2022 <- TM_data_prod_func(tm_data_raw_2022, 2022)
current_year_data <- processed_data_2024
ancillary_data_numbers <- current_year_data$student_numbers %>%
select(-ReportYr) %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "count"
) %>%
select(
qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
count
) %>%
filter(!is.na(count)) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade, .locale = "en")
ancillary_data_percentages <- current_year_data$student_percentages %>%
select(-ReportYr) %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "percentage"
) %>%
select(
qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
percentage
) %>%
filter(percentage != "NA%") %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade, .locale = "en")
ancillary_data <- ancillary_data_numbers %>%
left_join(ancillary_data_percentages)
write_csv(ancillary_data, paste0(ancillary_save_path, "tm_numbers_percentages_", current_year, ".csv"))
student_numbers <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x) {
bind_rows(mget(x, .GlobalEnv)[[1]]["student_numbers"])
}) %>% bind_rows()
student_percentages <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x) {
bind_rows(mget(x, .GlobalEnv)[[1]]["student_percentages"])
}) %>% bind_rows()
qual_lookup <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x) {
bind_rows(mget(x, .GlobalEnv)[[1]]["qual_lookup"])
}) %>% bind_rows()
grades_ordered_lookup <- lapply(ls(pattern = "processed_data_", .GlobalEnv), function(x) {
bind_rows(mget(x, .GlobalEnv)[[1]]["grades_ordered_lookup"])
}) %>% bind_rows()
saveRDS(student_numbers, "./data/all_student_numbers.rds")
saveRDS(student_percentages, "./data/all_student_percentages.rds")
saveRDS(qual_lookup, "./data/qual_lookup.rds")
saveRDS(grades_ordered_lookup, "./data/grade_lookup.rds")
