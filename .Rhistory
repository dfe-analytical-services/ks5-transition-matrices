setup_proxy <- function(){
# Ask the user for their password
password <- rstudioapi::askForPassword("Please provide your Windows Password to authenticate.")
# Construct proxy url using username and password
proxy_encoded_url <- URLencode(
paste0(
"http://ad\\",
Sys.getenv("USERNAME"),
":",
password,
"@mwg.proxy.ad.hq.dept:9090"
#"@192.168.2.40:8080"
))
# Construct commands to create environment variables
http_proxy_cmd <-  paste0("setx http_proxy ", proxy_encoded_url)
https_proxy_cmd <-  paste0("setx https_proxy ", proxy_encoded_url)
# Create system environment variables
system(http_proxy_cmd)
system(https_proxy_cmd)
}
setup_proxy()
setup_proxy <- function(){
# Ask the user for their password
password <- rstudioapi::askForPassword("Please provide your Windows Password to authenticate.")
# Construct proxy url using username and password
proxy_encoded_url <- URLencode(
paste0(
"http://ad\\",
Sys.getenv("USERNAME"),
":",
password,
#"@mwg.proxy.ad.hq.dept:9090"
"@192.168.2.40:8080"
))
# Construct commands to create environment variables
http_proxy_cmd <-  paste0("setx http_proxy ", proxy_encoded_url)
https_proxy_cmd <-  paste0("setx https_proxy ", proxy_encoded_url)
# Create system environment variables
system(http_proxy_cmd)
system(https_proxy_cmd)
}
setup_proxy()
renv::status()
renv::restore()
Sys.setenv(no_proxy="*")
shiny::runApp()
Sys.setenv(no_proxy="*")
renv::snapshot()
runApp()
renv::status()
runApp()
# -----------------------------------------------------------------------------------------------------------------------------
# ---- TM Creation Script ----
# Contains the functions for creating the TM tables
# -----------------------------------------------------------------------------------------------------------------------------
# Package Import ----
library(dplyr)
library(ggplot2)
library(purrr)
library(DT)
library(tidyr)
library(stringr)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Read in the Data from 01_data-processing ----
# -----------------------------------------------------------------------------------------------------------------------------
stud_numbers <- readRDS('all_student_numbers.rds')
stud_percentages <- readRDS('all_student_percentages.rds')
lookup <- readRDS('lookup.rds')
grades <- readRDS('grades.rds')
grades_qrd <- readRDS('grades_qrd.rds')
quals_with_multi_grades <- readRDS('mult_grade_structure.rds')
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Prior Grade boundaries ----
# -----------------------------------------------------------------------------------------------------------------------------
grade_boundaries = c("<1", "1-<2", "2-<3", "3-<4", "4-<5", "5-<6", "6-<7", "7-<8", "8-<9", "9>=")
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Edits to the student exams data to make it useable in the functions below ----
# -----------------------------------------------------------------------------------------------------------------------------
# How to ensure that the ROW_ID column is correctly arranged.
stud_numbers <- stud_numbers %>%
arrange(QUAL_ID, PRIOR_BAND)
stud_percentages <- stud_percentages %>%
arrange(QUAL_ID, PRIOR_BAND)
# Also need to make sure that all grades have a column in these tables - even if its just filled with NAs
# Grades which do not have a column in the student exams data
grade_list_qrd <- unique(grades_qrd$GRADE)
#column_list_exams <- names(stud_numbers)
# Function which adds missing columns to the table
add_missing_cols <- function(data, cname) {
add <-cname[!cname %in% names(data)]
if(length(add)!=0) data[add] <- NA
data
}
stud_numbers <- add_missing_cols(stud_numbers, grade_list_qrd)
stud_percentages <- add_missing_cols(stud_percentages, grade_list_qrd)
# Note some difficulty below
# Want to get the grades column in the right order such that numeric values and characters ascend
#> sort(z, decreasing = FALSE) ASCENDING
#[1] "1" "5" "7" "a" "g" "z"
#> sort(z, decreasing = TRUE) DESCENDING
#[1] "z" "g" "a" "7" "5" "1"
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Numbers Table from QRD filtering grades on SUBLEVNO ----
# -----------------------------------------------------------------------------------------------------------------------------
# Returns a table from the Student Numbers CSV
number_select_qrd_1 = function(qual, subj, size){
filter_selection = paste0(qual, subj, size)
qual_grades = filter(grades_qrd, SUBLEVNO == qual)
# Grades already sorted so just need to extract list of grades
grade_list = qual_grades$GRADE
table = stud_numbers %>%
filter(QUAL_ID == filter_selection) %>%
select(PRIOR_BAND, grade_list)
return(table)
}
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Percentages Table from QRD filtering grades on SUBLEVNO ----
# -----------------------------------------------------------------------------------------------------------------------------
# Returns a table from the Student Percentages CSV
percentage_select_qrd_1 = function(qual, subj, size){
filter_selection = paste0(qual, subj, size)
qual_grades = filter(grades_qrd, SUBLEVNO == qual)
# Grades already sorted so just need to extract list of grades
grade_list = qual_grades$GRADE
table = stud_percentages %>%
filter(QUAL_ID == filter_selection) %>%
select(PRIOR_BAND, grade_list)
return(table)
}
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Numbers Table from QRD filtering grades on SUBLEVNO & SUBJ ----
# -----------------------------------------------------------------------------------------------------------------------------
# Returns a table from the Student Numbers CSV
number_select_qrd_2 = function(qual, subj, size){
filter_selection = paste0(qual, subj, size)
qual_grades = filter(grades_qrd, SUBLEVNO == qual & SUBJ == subj)
# Grades already sorted so just need to extract list of grades
grade_list = qual_grades$GRADE
table = stud_numbers %>%
filter(QUAL_ID == filter_selection) %>%
select(PRIOR_BAND, grade_list)
return(table)
}
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Percentages Table from QRD filtering grades on SUBLEVNO & SUBJ ----
# -----------------------------------------------------------------------------------------------------------------------------
# Returns a table from the Student Percentages CSV
percentage_select_qrd_2 = function(qual, subj, size){
filter_selection = paste0(qual, subj, size)
qual_grades = filter(grades_qrd, SUBLEVNO == qual & SUBJ == subj)
# Grades already sorted so just need to extract list of grades
grade_list = qual_grades$GRADE
table = stud_percentages %>%
filter(QUAL_ID == filter_selection) %>%
select(PRIOR_BAND, grade_list)
return(table)
}
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Numbers Table - for use with grades produced in 01_data-processing
# if using this remember to update server.R - one update for numbers, two for percentages ----
# -----------------------------------------------------------------------------------------------------------------------------
# Returns a table from the Student Numbers CSV
number_select = function(qual, subj, size){
filter_selection = paste0(qual, subj, size)
qual_grades = filter(grades, SUBLEVNO == qual)
# Would like to sort numeric and character grades differently so that all grades go from low - high
which_char_grades =  which(is.na(suppressWarnings(as.numeric(qual_grades$GRADE))))
character_grades = qual_grades$GRADE[which_char_grades]
number_grades = qual_grades$GRADE[-which_char_grades]
sort_char_grades = sort(character_grades, decreasing = TRUE)
sort_num_grades = sort(number_grades)
comb_grades = append(sort_char_grades, sort_num_grades)
#print(comb_grades)
table = stud_numbers %>%
filter(QUAL_ID == filter_selection) %>%
select(PRIOR_BAND, comb_grades)
return(table)
}
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Percentages Table - for use with grades produced in 01_data-processing
# if using this remember to update server.R - one update for numbers, two for percentages ----
# -----------------------------------------------------------------------------------------------------------------------------
# Returns a table from the Student Percentages CSV
percentage_select = function(qual, subj, size){
filter_selection = paste0(qual, subj, size)
qual_grades = filter(grades, SUBLEVNO == qual)
# Would like to sort numeric and character grades differently so that all grades go from low - high
which_char_grades =  which(is.na(suppressWarnings(as.numeric(qual_grades$GRADE))))
character_grades = qual_grades$GRADE[which_char_grades]
number_grades = qual_grades$GRADE[-which_char_grades]
sort_char_grades = sort(character_grades, decreasing = TRUE)
sort_num_grades = sort(number_grades)
comb_grades = append(sort_char_grades, sort_num_grades)
#print(comb_grades)
table = stud_percentages %>%
filter(QUAL_ID == filter_selection) %>%
select(PRIOR_BAND, comb_grades)
return(table)
}
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Example Table ----
# -----------------------------------------------------------------------------------------------------------------------------
# Create a normal table for example table
# example_data <- number_select(lookup %>% filter(`Qualification name` == 'GCE A level') %>% distinct(SUBLEVNO),
#                               lookup %>% filter(`Subject name` == 'Mathematics') %>% distinct(SUBJ),
#                               lookup %>% filter(ASIZE == 1) %>% distinct(size_lookup))  %>%
#   mutate_all(list(~str_replace(., 'NA%', ''))) %>%
#   rename('Prior Band' = PRIOR_BAND)
lookup_selection_example <- lookup %>%
filter(`Qualification name` == 'GCE A level' & `Subject name` == 'Mathematics' & ASIZE == 1) %>%
distinct()
example_data <- number_select_qrd_1(lookup_selection_example$SUBLEVNO, lookup_selection_example$SUBJ, lookup_selection_example$size_lookup) %>%
rename('Prior Band' = PRIOR_BAND) %>%
.[!sapply(., function (x) all(is.na(x) | x == ""))]
# extract the value for example
example_value <- example_data %>%
filter(`Prior Band` == '5-<6') %>%
pull('C')
# Could write this as a function like below
#test_func <- . %>% filter(`Prior Band` == '5-<6') %>% pull('C')
#test_func(example_data)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- underlying data download - long table format ----
# -----------------------------------------------------------------------------------------------------------------------------
# re-format stud_numbers and stud_percentages in long table format for user download
raw_stud_numbers <- stud_numbers %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)
raw_stud_percentages <- stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
mutate(COUNT = as.numeric(gsub("%", "", COUNT))) %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)
stud_numbers
stud_numbers %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)
stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
mutate(COUNT = as.numeric(gsub("%", "", COUNT))) %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)
stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
#mutate(COUNT = as.numeric(gsub("%", "", COUNT))) %>%
drop_na("COUNT") %>%
mutate(COUNT = as.numeric(gsub("%", "", COUNT))) %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)
raw_stud_percentages <- stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
#mutate(COUNT = as.numeric(gsub("%", "", COUNT))) %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)
stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
#mutate(COUNT = as.numeric(gsub("%", "", COUNT))) %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)
runApp()
runApp()
stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
mutate(COUNT = as.numeric(gsub("%", "", COUNT))) %>%  ##THIS IS ERRORING
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)
stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT")
stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
mutate(COUNT = gsub("%", "", COUNT)) %>%  ##THIS IS ERRORING
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)
runApp()
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='department-for-education', token='A32E0B0F40CF7C09BFA0A5247A588AB1', secret='54jie5u4SX7YE8UyvtOGMgD0MkbrTGJ9THzEM78S')
deployApp()
warnings()
install.package('BH')
install.packages('BH')
install.packages('BH')
install.packages('BH')
install.packages('BH')
install.packages('BH')
install.packages('BH')
install.packages("BH")
install.packages("C:/Users/LSELBY/OneDrive - Department for Education/Downloads/BH_1.72.0-3.tar.gz", repos = NULL, type = "source")
library(BH)
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
renv::status()
renv::snapshot()
rsconnect::setAccountInfo(name='department-for-education', token='A32E0B0F40CF7C09BFA0A5247A588AB1', secret='54jie5u4SX7YE8UyvtOGMgD0MkbrTGJ9THzEM78S'
)
rsconnect::setAccountInfo(name='department-for-education', token='A32E0B0F40CF7C09BFA0A5247A588AB1', secret='54jie5u4SX7YE8UyvtOGMgD0MkbrTGJ9THzEM78S')
rsconnect::setAccountInfo(name='department-for-education', token=${{secrets.SHINYAPPS_TOKEN}}, secret=${{secrets.SHINYAPPS_SECRET}})
install.packages('shinytest')
library(shinytest)
recordTest()
recordTest()
shiny::runApp()
recordTest()
Sys.unsetenv("http_proxy")
Sys.unsetenv("https_proxy")
recordTest()
shiny::runApp()
testApp()
Sys.unsetenv("http_proxy")
Sys.unsetenv("https_proxy")
testApp()
# Sys.unsetenv("http_proxy")
# Sys.unsetenv("https_proxy")
library(shiny)
library(shinydashboard)
library(stringr)
library(shiny)
library(shinytest)
#library(formattable)
testApp()
renv::status()
renv::snapshot()
shiny::runApp()
shiny::runApp()
readRDS('R/all_student_numbers.rds')
readRDS('R\all_student_numbers.rds')
readRDS('R/all_student_numbers.rds')
runApp()
testApp()
Sys.unsetenv("http_proxy")
Sys.unsetenv("https_proxy")
testApp()
