qual_lookup <- tm_data %>%
select(Qual_Description, SUBLEVNO, Subject, SUBJ, ASIZE, GSIZE, gradeStructure) %>%
distinct() %>%
mutate(SIZE = case_when(ASIZE == 0 ~ GSIZE,
TRUE ~ ASIZE))
test_combs_2 <- test_combs %>% left_join(qual_lookup)
test_combs_2 <- test_combs %>% left_join(qual_lookup %>% mutate(SUBLEVNO = as.character(SUBLEVNO)))
test_combs_2 <- test_combs %>% left_join(qual_lookup %>% mutate(SUBLEVNO = as.character(SUBLEVNO), SUBJ = as.character(SUBJ)))
test_combs_2 <- test_combs %>% left_join(qual_lookup %>% mutate(SUBLEVNO = as.character(SUBLEVNO), SUBJ = as.character(SUBJ), SIZE = as.character(SIZE)))
View(test_combs_2)
test_new <- setdiff(student_numbers_sql, student_numbers_l3va2) #%>%
filter(SUBLEVNO == 101,
SUBJ == 20296,
PRIOR_BAND == "1-<2")
test_old <- setdiff(student_numbers_l3va2, student_numbers_sql)# %>%
View(student_numbers_l3va)
View(lookup)
View(qual_lookup)
relig_income
relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
student_numbers
ancillary_data_numbers <- student_numbers %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = grade,
values_to = student_count)
ancillary_data_numbers <- student_numbers %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_count")
ancillary_data_numbers <- student_numbers %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_count") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment = PRIOR_BAND,
grade,
student_count)
ancillary_data_numbers <- student_numbers %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_count") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment = PRIOR_BAND,
grade,
student_count) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment)
View(ancillary_data_numbers)
ancillary_data_numbers <- student_numbers %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_count") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment = PRIOR_BAND,
grade,
student_count) %>%
filter(!is.na(grade)) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment)
ancillary_data_numbers <- student_numbers %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_count") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment = PRIOR_BAND,
grade,
student_count) %>%
filter(!is.na(student_count)) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment)
ancillary_data_numbers <- student_numbers %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_count") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment = PRIOR_BAND,
grade,
student_count) %>%
filter(!is.na(student_count)) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment, grade)
ancillary_data_percentages <- student_percentages %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_percent") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment = PRIOR_BAND,
grade,
student_percent) %>%
filter(!is.na(student_percent)) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment, grade)
ancillary_data_percentages <- student_percentages %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_percent") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment = PRIOR_BAND,
grade,
student_percent)
View(ancillary_data_percentages)
ancillary_data_percentages <- student_percentages %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_percent") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment = PRIOR_BAND,
grade,
student_percent) %>%
filter(student_percent != "NA%") %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment, grade)
ancillary_data_percentages <- student_percentages %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_percentage") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment = PRIOR_BAND,
grade,
student_percentage) %>%
filter(student_percentage != "NA%") %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment, grade)
ancillary_data <- ancillary_data_numbers %>%
left_join(ancillary_data_percentages)
View(ancillary_data)
rm(list=ls())
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Things to change between runs ----
# -----------------------------------------------------------------------------------------------------------------------------
tm_file = "[KS5_STATISTICS_RESTRICTED].[TM_2022].[TM_data_2022U]"
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Reading in the data from SQL tables ----
# -----------------------------------------------------------------------------------------------------------------------------
# establish connection to server
con <- DBI::dbConnect(odbc::odbc(), driver = "SQL Server",
server = "3dcpri-pdb16\\acsqls")
# select data from SQL tables
tm_data_raw <- tbl(con, sql(paste("select * from", tm_file))) %>% collect()
# disconnect
DBI::dbDisconnect(con)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- SORTING NAs ----
# -----------------------------------------------------------------------------------------------------------------------------
colSums(is.na(tm_data_raw)) %>% as.data.frame()
# NAs in prior band which need removing
# NAs in subj because no subj code was assigned within the SQL production code
# SUBJ is assigned by joining on the QUAL_SUBJ_LOOKUP,
# but some subjects are filtered out of the L3VA process if they are not entered in 5 or more institutions
# for the TMs we don't mind this rule, so we've decided to leave them in but we will have to create new SUBJ codes
# to ensure I'm not overwriting any existing SUBJ codes, I'm generating 3 digit random numbers (SUBJ is usually 5 digits)
tm_data_subj_na <- tm_data_raw %>%
filter(!(is.na(PRIOR_BAND)),
is.na(SUBJ)) %>%
group_by(Subject) %>%
mutate(SUBJ = sample(100:900,1))
tm_data <- tm_data_raw %>%
filter(!(is.na(PRIOR_BAND)),
!(is.na(SUBJ))) %>%
bind_rows(tm_data_subj_na)
colSums(is.na(tm_data)) %>% as.data.frame()
# -----------------------------------------------------------------------------------------------------------------------------
# ---- NUMBERS & PERCENTAGES CALCULATED ----
# -----------------------------------------------------------------------------------------------------------------------------
student_numbers <- tm_data %>%
mutate(GRADE = case_when(GRADE == "Fail" & SUBLEVNO != 130 ~ "U",
TRUE ~ GRADE),
SIZE = case_when(ASIZE == 0 ~ GSIZE,
TRUE ~ ASIZE),
QUAL_ID = paste0(SUBLEVNO, SUBJ, SIZE, gradeStructure),
ROW_ID = paste0(SUBLEVNO, SUBJ, SIZE, PRIOR_BAND, gradeStructure)) %>%
mutate(across(c(everything(), -total_students), ~as.character(.))) %>%
arrange(ROW_ID) %>%
pivot_wider(names_from = GRADE, values_from = total_students)
student_percentages <- student_numbers %>%
janitor::adorn_percentages() %>%
mutate_if(is.numeric, function(x){round(x*100, 2)}) %>%
mutate_if(is.numeric, ~paste0(.x, "%"))
qual_lookup <- tm_data %>%
select(Qual_Description, SUBLEVNO, Subject, SUBJ, ASIZE, GSIZE, gradeStructure) %>%
distinct() %>%
mutate(SIZE = case_when(ASIZE == 0 ~ GSIZE,
TRUE ~ ASIZE))
grade_lookup_u <- tm_data %>%
select(SUBLEVNO, SUBJ, ASIZE, GSIZE, gradeStructure) %>%
distinct() %>%
mutate(GRADE = case_when(SUBLEVNO == 130 ~ "Fail",
TRUE ~ "U"))
grade_lookup_sep <- tm_data %>%
select(SUBLEVNO, SUBJ, ASIZE, GSIZE, gradeStructure) %>%
distinct() %>%
mutate(GRADE = gradeStructure) %>%
separate_rows(. , GRADE, sep = ",")
grade_lookup <- bind_rows(grade_lookup_u, grade_lookup_sep) %>%
arrange(SUBLEVNO, SUBJ, ASIZE, GSIZE, gradeStructure, GRADE) %>%
mutate(SIZE = case_when(ASIZE == 0 ~ GSIZE,
TRUE ~ ASIZE))
# would like to sort numeric and character grades differently so that all grades go from low - high
# for numeric this is ascending, for character this is descending
# will need to split again based on numeric and character and then re-combine again
grades_char <- grade_lookup %>%
mutate(char_grade_check = is.na(suppressWarnings(as.numeric(grade_lookup$GRADE)))) %>%  # gives extra column - True is character, False is number
filter(char_grade_check == TRUE) %>%
arrange(desc(GRADE))
grades_num <- grade_lookup %>%
mutate(char_grade_check = is.na(suppressWarnings(as.numeric(grade_lookup$GRADE)))) %>%  # gives extra column - True is character, False is number
filter(char_grade_check == FALSE) %>%
arrange(GRADE)
grades_ordered_lookup <- bind_rows(grades_char, grades_num) %>%
arrange(SUBLEVNO)
ancillary_data_numbers <- student_numbers %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_count") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment = PRIOR_BAND,
grade,
student_count) %>%
filter(!is.na(student_count)) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment, grade)
ancillary_data_percentages <- student_percentages %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_percentage") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment = PRIOR_BAND,
grade,
student_percentage) %>%
filter(student_percentage != "NA%") %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment, grade)
ancillary_data <- ancillary_data_numbers %>%
left_join(ancillary_data_percentages)
ancillary_save_path <- "//lonnetapp01/DSGA2/!!Secure Data/SFR/2022/KS5/November_2022/LIVE_RUN/06_ancillary/"
current_year <- "2022U"
write_csv(ancillary_data, paste0(ancillary_save_path, 'tm_numbers_percentages_', current_year, '.csv'))
library(readr)
install.packages("readr")
library(readr)
write_csv(ancillary_data, paste0(ancillary_save_path, 'tm_numbers_percentages_', current_year, '.csv'))
ancillary_data_percentages <- student_percentages %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_percentage") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
student_percentage) %>%
filter(student_percentage != "NA%") %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment, grade)
ancillary_data_percentages <- student_percentages %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_percentage") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
student_percentage) %>%
filter(student_percentage != "NA%") %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment, grade)
ancillary_data_numbers <- student_numbers %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_count") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
student_count) %>%
filter(!is.na(student_count)) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade)
ancillary_data_percentages <- student_percentages %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "student_percentage") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
student_percentage) %>%
filter(student_percentage != "NA%") %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade)
ancillary_data <- ancillary_data_numbers %>%
left_join(ancillary_data_percentages)
write_csv(ancillary_data, paste0(ancillary_save_path, 'tm_numbers_percentages_', current_year, '.csv'))
write_csv(ancillary_data, paste0(ancillary_save_path, 'tm_numbers_percentages_', current_year, '.csv'))
ancillary_data_numbers <- student_numbers %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "count") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
count) %>%
filter(!is.na(count)) %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade)
ancillary_data_percentages <- student_percentages %>%
pivot_longer(!c(Qual_Description, SUBLEVNO, Potential_Level, ASIZE, GSIZE, MAPPING, Subject, gradeStructure, PRIOR_BAND, SUBJ, SIZE, QUAL_ID, ROW_ID),
names_to = "grade",
values_to = "percentage") %>%
select(qualification_name = Qual_Description,
qualification_code = SUBLEVNO,
subject_name = Subject,
subject_code = SUBJ,
size = SIZE,
grade_structure = gradeStructure,
prior_attainment_band = PRIOR_BAND,
grade,
percentage) %>%
filter(percentage != "NA%") %>%
arrange(qualification_code, subject_code, size, grade_structure, prior_attainment_band, grade)
ancillary_data <- ancillary_data_numbers %>%
left_join(ancillary_data_percentages)
write_csv(ancillary_data, paste0(ancillary_save_path, 'tm_numbers_percentages_', current_year, '.csv'))
# exam and lookup file sources to be updated each year
###### ----- 2021 unamended Data ----- #####
exam_file = "[L3VA].[U2022].[FILTERED_EXAMS_PROVIDERS]"
lookup_file = "[L3VA].[U2022].[QUAL_SUBJ_LOOKUP]"
# qualifications with character and numeric grading, e.g D1, D2...
# can use QA check in sections below to see if there are any new qualifications to add to this list
sublevno_char_num = c(113, 114)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Reading in the data from SQL tables ----
# -----------------------------------------------------------------------------------------------------------------------------
# establish connection to server
con <- DBI::dbConnect(odbc::odbc(), driver = "SQL Server",
server = "3dcpri-pdb16\\acsqls")
# select data from SQL tables
exams_data <- tbl(con, sql(paste("select * from", exam_file, "where GRADE <> 'Q'"))) %>% collect()
lookup <- tbl(con, sql(paste("select [Qualification name], SUBLEVNO, [Subject name], SUBJ, SIZE
from", lookup_file, "where EXAM_COHORT not in (1)"))) %>% collect()
# disconnect
DBI::dbDisconnect(con)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Check for sublevno_char_num ----
# -----------------------------------------------------------------------------------------------------------------------------
letters_only <- function(x) !grepl("[^A-Za-z]", x)
numbers_only <- function(x) !grepl("\\D", x)
sublevno_char_num_qa <- exams_data %>%
mutate(grade_list = ifelse(letters_only(GRADE) == TRUE |
numbers_only(GRADE) == TRUE,
FALSE, GRADE)) %>%
select (SUBLEVNO, GRADE, grade_list) %>%
group_by(SUBLEVNO, grade_list) %>%
filter(grade_list != FALSE) %>%
summarise()
# remove 113 and 114 because we already know about them, and 130 for the IB
sublevno_char_num_qa_filtered <- sublevno_char_num_qa %>%
filter(!(SUBLEVNO %in% c(113, 114, 130)))
# check list for any other quals with numbers and letters in the grades, can ignore **
# View(sublevno_char_num_qa_filtered)
# any extra qualifications in this list that have a number and a character making up their grades then they need to be added to the sublevno_char_num list
# this is found in the section above 'Things to change between runs'
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Qualification and Subject Lookup ----
# -----------------------------------------------------------------------------------------------------------------------------
# create new column which removes decimal point from SIZE
lookup <- lookup %>%
mutate(size_lookup = gsub("[.]", "", SIZE)) %>%
arrange(SUBLEVNO)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create the prior attainment bands ----
# -----------------------------------------------------------------------------------------------------------------------------
tm_prior_bands <- exams_data %>%
filter(EXAM_COHORT != 1) %>%
select(SUBLEVNO, SUBJ, GRADE, ASIZE, PRIOR, QUAL_ID) %>%
mutate(PRIOR_BAND = case_when(PRIOR <1 ~ "<1",
PRIOR >=1 & PRIOR <2 ~ "1-<2",
PRIOR >=2 & PRIOR <3 ~ "2-<3",
PRIOR >=3 & PRIOR <4 ~ "3-<4",
PRIOR >=4 & PRIOR <5 ~ "4-<5",
PRIOR >=5 & PRIOR <6 ~ "5-<6",
PRIOR >=6 & PRIOR <7 ~ "6-<7",
PRIOR >=7 & PRIOR <8 ~ "7-<8",
PRIOR >=8 & PRIOR <9 ~ "8-<9",
PRIOR >=9 ~ "9>="),
QUAL_ID = stringr::str_remove(QUAL_ID, "."))
# this removes the first character from the QUAL_ID variable as '.' represents a single character.
# remove the exmas_data variable to free up space
# rm(exams_data)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Cross Tab - Assign count of values to grades ----
# -----------------------------------------------------------------------------------------------------------------------------
tm_grade_count <- tm_prior_bands %>%
# collapse synonyms of grades into one.
mutate(GRADE = case_when(GRADE == "*A" | GRADE == "A*" ~ "*A",
GRADE == "*D" | GRADE == "D*" ~ "D*",
GRADE == "**D" | GRADE == "D**" ~ "D**",
GRADE == "*DD" | GRADE == "DD*" ~ "DD*",
GRADE == "DDM" | GRADE == "MDD" ~ "DDM",
GRADE == "F" ~ "U",
grepl("F", GRADE) ~ "FAIL",
TRUE ~ as.character(GRADE))) %>%
# SUBLEVNOs in sublevno_char_num have numeric/character (P1, D1, M1) grading structure so don't want to strip letters from these
mutate(GRADE = ifelse(is.na(as.numeric(str_extract_all(GRADE, "\\d+"))) | SUBLEVNO %in% sublevno_char_num,
GRADE, as.numeric(str_extract_all(GRADE, "\\d+")))) %>%
count(GRADE, QUAL_ID, PRIOR_BAND) %>%
mutate(ROW_ID = paste0(QUAL_ID, PRIOR_BAND), SUBLEVNO = substr(QUAL_ID, 1, 3), SUBJ = substr(QUAL_ID, 4, 8),
ASIZE = substr(QUAL_ID, 9, length(QUAL_ID))) %>%
arrange(ROW_ID)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- NUMBERS & PERCENTAGES CALCULATED ----
# -----------------------------------------------------------------------------------------------------------------------------
# spread the grades across into their own columns
# calculate the percentage data
student_numbers_l3va <- tm_grade_count %>% pivot_wider(names_from = GRADE, values_from = n)
student_percentages_l3va <- student_numbers %>%
janitor::adorn_percentages() %>%
mutate_if(is.numeric, function(x){round(x*100, 2)}) %>%
mutate_if(is.numeric, ~paste0(.x, "%"))
student_percentages_l3va <- student_numbers_l3va %>%
janitor::adorn_percentages() %>%
mutate_if(is.numeric, function(x){round(x*100, 2)}) %>%
mutate_if(is.numeric, ~paste0(.x, "%"))
student_numbers_sql <- student_numbers %>%
select(-c(Qual_Description, Potential_Level, Subject, gradeStructure, ASIZE, GSIZE, MAPPING, Pass, QUAL_ID, ROW_ID)) %>%
rename(`D*` = `*D`,
`D**` = `**D`,
`DD*` = `*DD`) %>%
mutate(SIZE = str_remove(SIZE, '\\.'))
student_numbers_l3va2 <- student_numbers_l3va %>%
rename(SIZE = ASIZE,
Fail = FAIL) %>%
mutate(MP = case_when(!(is.na(PM)) ~ PM,
TRUE ~ MP),
DM = case_when(!(is.na(MD)) ~ MD,
TRUE ~ DM)) %>%
select(-c(PM, MD, QUAL_ID, ROW_ID))
test_new <- setdiff(student_numbers_sql, student_numbers_l3va2)
test_old <- setdiff(student_numbers_l3va2, student_numbers_sql)
View(test_new)
View(test_old)
View(qual_lookup)
View(test_new)
test_combs <- test_new %>% select(SUBLEVNO, SUBJ, SIZE) %>% distinct()
test_combs_2 <- test_combs %>% left_join(qual_lookup %>% mutate(SUBLEVNO = as.character(SUBLEVNO), SUBJ = as.character(SUBJ), SIZE = as.character(SIZE)))
View(test_combs_2)
View(tm_data_raw)
View(lookup)
shiny::runApp()
shiny::runApp()
