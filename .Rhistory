raw_stud_numbers_lookup <- stud_numbers %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT) %>%
mutate(SUBLEVNO = as.numeric(SUBLEVNO),
SUBJ = as.numeric(SUBJ)) %>%
left_join(lookup, by = c("SUBLEVNO" = "SUBLEVNO", "SUBJ" = "SUBJ", "ASIZE" = "size_lookup")) %>%
select("Qualification name", SUBLEVNO, "Subject name", SUBJ, ASIZE = ASIZE.y, PRIOR_BAND, GRADE, COUNT)
raw_stud_percentages_lookup <- stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
mutate(COUNT = as.numeric(gsub("%", "", COUNT))) %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)%>%
mutate(SUBLEVNO = as.numeric(SUBLEVNO),
SUBJ = as.numeric(SUBJ)) %>%
left_join(lookup, by = c("SUBLEVNO" = "SUBLEVNO", "SUBJ" = "SUBJ", "ASIZE" = "size_lookup")) %>%
select("Qualification name", SUBLEVNO, "Subject name", SUBJ, ASIZE = ASIZE.y, PRIOR_BAND, GRADE, COUNT)
lookup <- readRDS('lookup.rds')
raw_stud_numbers_lookup <- stud_numbers %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT) %>%
mutate(SUBLEVNO = as.numeric(SUBLEVNO),
SUBJ = as.numeric(SUBJ)) %>%
left_join(lookup, by = c("SUBLEVNO" = "SUBLEVNO", "SUBJ" = "SUBJ", "ASIZE" = "size_lookup")) %>%
select("Qualification name", SUBLEVNO, "Subject name", SUBJ, ASIZE = ASIZE.y, PRIOR_BAND, GRADE, COUNT)
raw_stud_percentages_lookup <- stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
mutate(COUNT = as.numeric(gsub("%", "", COUNT))) %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)%>%
mutate(SUBLEVNO = as.numeric(SUBLEVNO),
SUBJ = as.numeric(SUBJ)) %>%
left_join(lookup, by = c("SUBLEVNO" = "SUBLEVNO", "SUBJ" = "SUBJ", "ASIZE" = "size_lookup")) %>%
select("Qualification name", SUBLEVNO, "Subject name", SUBJ, ASIZE = ASIZE.y, PRIOR_BAND, GRADE, COUNT)
View(raw_stud_numbers_lookup)
raw_stud_numbers_lookup <- stud_numbers %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT) %>%
mutate(SUBLEVNO = as.numeric(SUBLEVNO),
SUBJ = as.numeric(SUBJ)) %>%
left_join(lookup, by = c("SUBLEVNO" = "SUBLEVNO", "SUBJ" = "SUBJ", "ASIZE" = "size_lookup")) %>%
select("qualification_name" = "Qualification name", sublevno = SUBLEVNO, "subject_name" = "Subject name",
subj = SUBJ, asize = ASIZE.y, prior_band = PRIOR_BAND, grade = GRADE, count = COUNT)
raw_stud_percentages_lookup <- stud_percentages %>%
pivot_longer(-c(QUAL_ID, PRIOR_BAND, ROW_ID, SUBLEVNO, SUBJ, ASIZE), names_to = "GRADE", values_to = "COUNT") %>%
mutate(COUNT = as.numeric(gsub("%", "", COUNT))) %>%
drop_na("COUNT") %>%
select(SUBLEVNO, SUBJ, ASIZE, PRIOR_BAND, GRADE, COUNT)%>%
mutate(SUBLEVNO = as.numeric(SUBLEVNO),
SUBJ = as.numeric(SUBJ)) %>%
left_join(lookup, by = c("SUBLEVNO" = "SUBLEVNO", "SUBJ" = "SUBJ", "ASIZE" = "size_lookup")) %>%
select("qualification_name" = "Qualification name", sublevno = SUBLEVNO, "subject_name" = "Subject name",
subj = SUBJ, asize = ASIZE.y, prior_band = PRIOR_BAND, grade = GRADE, count = COUNT)
# TIME COLUMNS - time_identifier will be reporting year, and time_period needs to be specified (see top of script)
# GEOGRAPHY COLUMNS - these are fixed and the same across all rows for this data
tidy_data_numbers <- raw_stud_numbers_lookup %>%
mutate(time_identifier = "Academic year",
time_period = reporting_year_value,
geographic_level = "National",
country_code = "E92000001",
country_name = "England") %>%
select(time_identifier, time_period, geographic_level, country_name, country_code,
sublevno, qualification_name, subj, subject_name, asize, prior_band, grade, count)
write_csv(tidy_data_numbers, path = "tm_numbers_tidy.csv")
# TIME COLUMNS - time_identifier will be reporting year, and time_period needs to be specified (see top of script)
# GEOGRAPHY COLUMNS - these are fixed and the same across all rows for this data
tidy_data_numbers <- raw_stud_numbers_lookup %>%
mutate(time_identifier = "Academic year",
time_period = reporting_year_value,
geographic_level = "National",
country_code = "E92000001",
country_name = "England") %>%
select(time_identifier, time_period, geographic_level, country_name, country_code,
sublevno, qualification_name, subj, subject_name, asize, prior_band, grade, count)
tidy_data_percentages <- raw_stud_percentages_lookup %>%
mutate(time_identifier = "Academic year",
time_period = reporting_year_value,
geographic_level = "National",
country_code = "E92000001",
country_name = "England") %>%
select(time_identifier, time_period, geographic_level, country_name, country_code,
sublevno, qualification_name, subj, subject_name, asize, prior_band, grade, count)
write_csv(tidy_data_numbers, path = "tm_numbers_tidy.csv")
write_csv(tidy_data_percentages, path = "tm_percentages_tidy.csv")
rm(list=ls())
library(dplyr)
library(tidyr)
qrd_table0_file = '[QRD].[dbo].[Subje01_2020_09_09]'
qrd_table2_file = '[QRD].[dbo].[Table2_2020_09_09]'
qrd_table3_file = '[QRD].[dbo].[Table3_2020_09_09]'
qrd_table4_file = '[QRD].[dbo].[Table4_2020_09_09]'
con <- DBI::dbConnect(odbc::odbc(), driver = 'SQL Server',
server = '3dcpri-pdb16\\acsqls')
qrd_table0 <- tbl(con, sql(paste("select QUID, Qual_Type, Syllabus_Short_Title, Last_Used
from", qrd_table0_file))) %>% collect()
qrd_table2 <- tbl(con, sql(paste("select Qual_Type, Grade, Grade_Text
from", qrd_table2_file))) %>% collect()
qrd_table3 <- tbl(con, sql(paste("select QUID, Grade, Grade_Text
from", qrd_table3_file))) %>% collect()
qrd_table4 <- tbl(con, sql(paste("select Qual_Type, Qual_Number, Qual_Description
from", qrd_table4_file))) %>% collect()
alev_grades <- qrd_table2 %>%
distinct() %>%
left_join(qrd_table0, by = "Qual_Type") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
filter(!Grade %in% c('N', 'Q', 'R', 'X')) %>%
filter(Grade != 'F')
View(alev_grades)
alev_grades <- qrd_table2 %>%
distinct() %>%
left_join(qrd_table0, by = "Qual_Type") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
# filter(!Grade %in% c('N', 'Q', 'R', 'X')) %>%
# filter(Grade != 'F') %>%
filter(Qual_Number = 111)
alev_grades <- qrd_table2 %>%
distinct() %>%
left_join(qrd_table0, by = "Qual_Type") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
# filter(!Grade %in% c('N', 'Q', 'R', 'X')) %>%
# filter(Grade != 'F') %>%
filter(Qual_Number == 111)
View(alev_grades)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Grading structure from the QRD ----
# This script is intended to be ran once, with the outputs automatically saved. Providing there is no updates to the underlying data, it is not neccessary to run
# this script for subsequent visits to the app.
# -----------------------------------------------------------------------------------------------------------------------------
# qrd_grades_r returns the grading structure in the R format
# GRADES_EXCEL returns the grading structure in the EXCEL format
# QUALIFICATION_LOOKUP_EXCEL returns the subject lookup table in the EXCEL format
# SUBJECT_LOOKUP_EXCEL returns the subject lookup table in the EXCEL format
# QUALSUB_EXCEL returns the QualSub table in the EXCEL format
# SIZESUB_EXCEL returns the SizeSub table in the EXCEL format
# SIZE_LOOKUP_EXCEL returns the Size lookup table in the EXCEL format
# all_grades_combined is a big lookup table showing everything
# subscript_subj_lookup is a subset of all_grades_combined specifically showing which SUBLEVNO_subscript_2 is associated with which subject (no grade data)
# -----------------------------------------------------------------------------------------------------------------------------
rm(list=ls())
library(dplyr)
library(tidyr)
library(data.table)
library(stringr)
qrd_table0_file = '[QRD].[dbo].[Subje01_2019_11_13]'
qrd_table2_file = '[QRD].[dbo].[Table2_2019_11_13]'
qrd_table3_file = '[QRD].[dbo].[Table3_2019_11_13]'
qrd_table4_file = '[QRD].[dbo].[Table4_2019_11_13]'
exam_file = '[L3VA].[A2019].[FILTERED_EXAMS_PROVIDERS_SJK]'
lookup_file = '[L3VA].[A2019].[QUAL_SUBJ_LOOKUP_SJK]'
#sublevno_char_num = c(113, 114)
#sublevno_char_num = list()
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Reading in the Data ----
# -----------------------------------------------------------------------------------------------------------------------------
# Establish connection to server
con <- DBI::dbConnect(odbc::odbc(), driver = 'SQL Server',
server = '3dcpri-pdb16\\acsqls')
# Select data from SQL tables
exams_data <- tbl(con, sql(paste("select *
from", exam_file))) %>%
collect()
lookup_data <- tbl(con, sql(paste('select [Qualification name], SUBLEVNO, [Subject name], SUBJ, ASIZE
from', lookup_file,
'where EXAM_COHORT not in (1)'))) %>%
collect()
qrd_table0 <- tbl(con, sql(paste("select QUID, Qual_Type, Syllabus_Short_Title, Last_Used
from", qrd_table0_file))) %>%
collect()
qrd_table2 <- tbl(con, sql(paste("select Qual_Type, Grade, Grade_Text
from", qrd_table2_file))) %>%
collect()
qrd_table3 <- tbl(con, sql(paste("select QUID, Grade, Grade_Text
from", qrd_table3_file))) %>%
collect()
qrd_table4 <- tbl(con, sql(paste("select Qual_Type, Qual_Number, Qual_Description
from", qrd_table4_file))) %>%
collect()
# Disconnect
DBI::dbDisconnect(con)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Find a list of all SUBLEVNOs, GNUMBERS and SUBJECTS in the EXAMS data and LOOKUP data ----
# -----------------------------------------------------------------------------------------------------------------------------
# Create the SUBLEVNO list from the exams data - should include all qualifications in exams data, and the list of GNUMBERS that are in the data
SUBLEVNO_in_exams <- exams_data %>%
select(SUBLEVNO) %>%
distinct() %>%
arrange(SUBLEVNO)
#  .[order(.$SUBLEVNO),]
# takes the first instance of each GNUMBER in the exams file
# PROBLEM: same GNUMBER for different subjects... Art & Design! 13510 13570 13650... etc all same GNUMBER 60149589
# need to group by SUBJ as well
GNUM_in_exams <- exams_data %>%
group_by(GNUMBER, SUBJ) %>%
slice(1) %>%
ungroup() %>%
select(SUBJ, GNUMBER, ASIZE) %>%
rename(QUID = GNUMBER)
# finds the subject names for the quals in the exams file
SUBJ_in_lookup <- lookup_data %>%
filter(SUBLEVNO %in% SUBLEVNO_in_exams$SUBLEVNO) %>%
select('Subject name', SUBJ)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Duplicate GNUMBERS for different Subjects ----
# -----------------------------------------------------------------------------------------------------------------------------
multiple_GNUM <- GNUM_in_exams %>%
filter(QUID %in% unique(.[duplicated(.$QUID),]$QUID)) %>%
left_join(., SUBJ_in_lookup, by = "SUBJ") %>%
distinct()
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Find a list of all SUBLEVNOs in the EXAMS data and GNUMBERS for qualifications with different grading structures ----
# -----------------------------------------------------------------------------------------------------------------------------
# Create a list of SUBLEVNOs that have different grading structures for the subjects within it
qrd_tab_2_4 <- qrd_table2 %>%
left_join(qrd_table4, by = "Qual_Type")
GNUMBER_diff_quals <- setdiff(SUBLEVNO_in_exams$SUBLEVNO, qrd_tab_2_4$Qual_Number)
# Create a list of GNUMBERS (also known as QUID in the QRD) for the subjects that have different grade structures in comparison to others within their qualification
GNUMBER_diff_grades <- exams_data %>%
filter(SUBLEVNO %in% GNUMBER_diff_quals) %>%
select(GNUMBER, SUBJ) %>%
distinct() %>%
arrange(GNUMBER)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create two tabels from the QRD data which filter out the grades from the SUBLEVNOs found in the exams data ----
# -----------------------------------------------------------------------------------------------------------------------------
# Joins the two QRD tables with qualifications with same grades, orders by Qual_Number, filters out grades N Q R X and F
same_grade_quals <- qrd_table2 %>%
distinct() %>%
left_join(qrd_table0, by = "Qual_Type") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
filter(!Grade %in% c('N', 'Q', 'R', 'X')) %>%
filter(Grade != 'F') %>%
filter(Qual_Number %in% SUBLEVNO_in_exams$SUBLEVNO) %>%
mutate(subscript_1 = Qual_Number) %>%
mutate(SUBLEVNO_subscript_1 = as.character(Qual_Number)) %>%
mutate(subscript_2 = Qual_Number) %>%
mutate(SUBLEVNO_subscript_2 = as.character(Qual_Number))
# Joins the two QRD tables with qualifications with different grades. makes additional column to append subscripts in order to differentiate subjects within qualification
# requires additional filter QUID %in% GNUMBER_diff_grades$GNUMBER because some of the qualifications have subjects that are not included in the TMs
diff_grade_quals <- qrd_table3 %>%
left_join(qrd_table0, by = "QUID") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
filter(!Grade %in% c('N', 'Q', 'R', 'X')) %>%
filter(Grade != 'F') %>%
filter(Qual_Number %in% SUBLEVNO_in_exams$SUBLEVNO) %>%
filter(QUID %in% GNUMBER_diff_grades$GNUMBER) %>%
group_by(QUID) %>%
mutate(subscript_1 = group_indices()) %>%
ungroup() %>%
unite("SUBLEVNO_subscript_1", c(Qual_Number,subscript_1), na.rm = TRUE, remove = FALSE) %>%
arrange(subscript_1)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create a huge lookup tables FOR ALL QUALS ----
# -----------------------------------------------------------------------------------------------------------------------------
all_same_grade_quals_subj <- same_grade_quals %>%
left_join(., GNUM_in_exams, by = "QUID") %>%
left_join(., SUBJ_in_lookup, by = "SUBJ") %>%
arrange(Qual_Number, subscript_1) %>%
distinct()
all_diff_grade_quals_subj <- diff_grade_quals %>%
left_join(., GNUM_in_exams, by = "QUID") %>%
left_join(., SUBJ_in_lookup, by = "SUBJ") %>%
arrange(Qual_Number, subscript_1) %>%
group_by(SUBJ) %>%
mutate(subscript_2 = group_indices()) %>%
ungroup() %>%
unite("SUBLEVNO_subscript_2", c(Qual_Number,subscript_2), na.rm = TRUE, remove = FALSE) %>%
arrange(subscript_2) %>%
distinct()
# makes big lookup table for ALL qualifications and subjects
all_grades_combined <- bind_rows(all_same_grade_quals_subj, all_diff_grade_quals_subj)
# Qualification 699 does not appear in QRD as its just an extension of GCE AS level (Not continued to A2) (121)
grades_699 <- all_grades_combined %>%
filter(Qual_Number == 111 | Qual_Number == 121) %>%
mutate(Qual_Number = 699) %>%
mutate(subscript_1 = 699) %>%
mutate(SUBLEVNO_subscript_1 = 699) %>%
mutate(subscript_2 = 699) %>%
mutate(SUBLEVNO_subscript_2 = 699) %>%
mutate(Last_Used = 0) %>%
mutate(Qual_Description = 'GCE AS level (All)') %>%
mutate(Syllabus_Short_Title = '') %>%
mutate(QUID = '') %>%
mutate(ASIZE = 0.5) %>%
distinct()
all_grades_combined <- rbind(all_grades_combined, grades_699)
# -------------
# QA to check all subjects in 111 and 121 are present in 699 data
# -------------
subj_699 <- grades_699 %>% select('Subject name', SUBJ) %>% distinct()
subj_111 <- lookup_data %>% filter(SUBLEVNO == 111) %>% select('Subject name', SUBJ)
subj_121 <- lookup_data %>% filter(SUBLEVNO == 121) %>% select('Subject name', SUBJ)
setdiff(subj_699, subj_121)
setdiff(subj_699, subj_111)
subj_111_121 <- merge(subj_111, subj_121, all = TRUE)
setdiff(subj_699, subj_111_121)
# -------------
# create smaller table showing which SUBLEVNO_subscript_2 is associated with which subject (no grade data)
subscript_subj_lookup <- all_grades_combined %>%
select(QUID, Qual_Number, Qual_Description, SUBLEVNO_subscript_2, SUBJ, `Subject name`) %>%
distinct() %>%
filter(!is.na(SUBJ))
# There are some rows with QUID information but no subject information
# looking through the data these might be because the QUIDs are associated with qual/subj that were 'last taken' a few years ago?
no_subj_info <- all_grades_combined %>%
select(QUID, Qual_Number, Qual_Description, SUBLEVNO_subscript_2, SUBJ, `Subject name`) %>%
distinct() %>%
filter(is.na(SUBJ))
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create QUALIFICATION LOOKUP ----
# -----------------------------------------------------------------------------------------------------------------------------
# need to make qualification lookups sep because quals with diff grades need subject names appending
# 699 also needs adding on manually
qual_names_EXCEL_ALL <- all_grades_combined %>%
mutate(Qual_Name = case_when(!(Qual_Number %in% GNUMBER_diff_quals) | Qual_Number == 699 ~ Qual_Description,
TRUE ~ paste(Qual_Description, `Subject name`,  sep = " ")
)
)
QUALIFICATION_LOOKUP_EXCEL <- qual_names_EXCEL_ALL %>%
select(SUBLEVNO_subscript_2, Qual_Name) %>%
distinct()
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create SUBJECT LOOKUP ----
# -----------------------------------------------------------------------------------------------------------------------------
SUBJECT_LOOKUP_EXCEL <- all_grades_combined %>%
select(SUBJ, 'Subject name') %>%
distinct() %>%
drop_na() %>%
arrange(SUBJ)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create QUALSUB ----
# -----------------------------------------------------------------------------------------------------------------------------
qual_names_EXCEL_grouped <- qual_names_EXCEL_ALL %>%
select(Qual_Name, SUBLEVNO_subscript_2, SUBJ) %>%
distinct() %>%
drop_na() %>%
arrange(SUBLEVNO_subscript_2, SUBJ) %>%
group_by(SUBLEVNO_subscript_2) %>%
mutate(subj_count = row_number()) %>%
ungroup()
QUALSUB_EXCEL <- qual_names_EXCEL_grouped %>%
reshape2::dcast(., Qual_Name + SUBLEVNO_subscript_2 ~ subj_count, value.var='SUBJ', fill='') %>%
distinct() %>%
arrange(SUBLEVNO_subscript_2)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create SIZESUB ----
# -----------------------------------------------------------------------------------------------------------------------------
size_EXCEL_grouped <- qual_names_EXCEL_ALL %>%
select(Qual_Name, SUBLEVNO_subscript_2, ASIZE) %>%
distinct() %>%
drop_na() %>%
arrange(ASIZE) %>%
group_by(SUBLEVNO_subscript_2) %>%
mutate(size_count = row_number()) %>%
ungroup()
SIZESUB_EXCEL <- size_EXCEL_grouped %>%
reshape2::dcast(., Qual_Name + SUBLEVNO_subscript_2 ~ size_count, value.var='ASIZE', fill='') %>%
distinct() %>%
arrange(SUBLEVNO_subscript_2)
# -----------------------------------------------------------------------------------------------------------------------------
# ---- Create SIZE LOOKUP ----
# -----------------------------------------------------------------------------------------------------------------------------
SIZE_LOOKUP_EXCEL <- qual_names_EXCEL_ALL %>%
select(SUBLEVNO_subscript_2, Qual_Name, SUBJ, `Subject name`, ASIZE) %>%
mutate(ASIZE = as.character(ASIZE)) %>%
distinct() %>%
drop_na()
View(all_grades_combined)
alev_grades <- qrd_table2 %>%
distinct() %>%
left_join(qrd_table0, by = "Qual_Type") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
# filter(!Grade %in% c('N', 'Q', 'R', 'X')) %>%
# filter(Grade != 'F') %>%
filter(Grade_Text == "Grade A*")
View(alev_grades)
alev_grades <- qrd_table2 %>%
distinct() %>%
left_join(qrd_table0, by = "Qual_Type") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
# filter(!Grade %in% c('N', 'Q', 'R', 'X')) %>%
# filter(Grade != 'F') %>%
filter(Grade_Text == "Grade A*") %>%
select(Grade, Grade_Text, Qual_Number, Qual_Description) %>%
distinct()
View(alev_grades)
astar_grades_qrd3 <- qrd_table3 %>%
left_join(qrd_table0, by = "QUID") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
filter(Grade_Text == "Grade A*") %>%
select(Grade, Grade_Text, Qual_Number, Qual_Description) %>%
distinct()
astar_grades_qrd2 <- qrd_table2 %>%
distinct() %>%
left_join(qrd_table0, by = "Qual_Type") %>%
left_join(qrd_table4, by = "Qual_Type") %>%
arrange(Qual_Number) %>%
filter(Grade_Text == "Grade A*") %>%
select(Grade, Grade_Text, Qual_Number, Qual_Description) %>%
distinct()
View(astar_grades_qrd3)
View(astar_grades_qrd2)
shiny::runApp()
install.packages("shinydashboard")
runApp()
install.packages("ggplot2")
runApp()
install.packages("tidyr")
runApp()
shiny::runApp()
install.packages("tidyr")
runApp()
install.packages(c("bit", "bit64", "cli", "dbplyr", "digest", "dplyr", "ellipsis", "glue", "odbc", "pillar", "Rcpp", "rlang", "stringi", "tibble", "vctrs"))
shiny::runApp()
shiny::runApp()
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv(restore)
install.packages("renv")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv(restore)
renv::restore()
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::restore()
install.packages("bit64")
renv::restore()
install.packages("BH")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::restore()
renv::restore()
renv::purge("bit64")
renv::restore()
warnings()
renv::restore()
Sys.setenv(RENV_DOWNLOAD_FILE_METHOD = "libcurl")
renv::restore()
Sys.setenv(RENV_DOWNLOAD_FILE_METHOD = "wininet")
renv::restore()
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
shiny::runApp()
R.version.string
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages("backports")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("bit")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("blob")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("bit64")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("caTools")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("cli")
runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages("crosstalk")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("DBI")
install.packages("ellipsis")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("ggplot2")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages("dplyr")
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages("yaml")
install.packages(c("tinytex", "withr", "xfun"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("data.table", "dbplyr", "digest"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("rmarkdown", "tibble", "tidyr"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::restore()
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi", "farver", "hms"))
install.packages(c("DT", "fansi"))
install.packages(c("DT", "fansi"))
install.packages(c("farver", "hms"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("htmltools", "htmlwidgets", "httpuv"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("MASS", "Matrix", "mgcv", "mime", "nlme", "odbc"))
install.packages(c("MASS", "Matrix", "mgcv", "mime"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
renv::snapshot()
install.packages(c("labeling", "later", "lattice", "nlme"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
install.packages(c("pillar", "prettyunits", "promises"))
shiny::runApp('~/TM/TM-app-PUBLIC - Rversion4/ks5-transition-matrices')
shiny::runApp()
renv::snapshot()
